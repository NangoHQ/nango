name: '[Release] Deploy service'
run-name: '[Release] [${{ inputs.stage }}] Deploy ${{ inputs.service }}'

on:
    workflow_dispatch:
        inputs:
            stage:
                type: choice
                description: 'stage to deploy to, defaults to staging'
                required: true
                default: 'staging'
                options:
                    - staging
                    - production
            service:
                type: choice
                description: 'Service to deploy, defaults to server'
                required: true
                default: 'server'
                options:
                    - server
                    - jobs
                    - runner
                    - persist
                    - orchestrator
                    - connect_ui

jobs:
    deploy_server:
        if: inputs.service == 'server'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Push tag
              run: |
                  docker buildx imagetools create nangohq/nango-server:${{ github.sha }} --tag nangohq/nango-server:${{ inputs.stage }}
            - name: Deploy server
              run: |
                  SERVICE_ID=${{ fromJson('{ production: "srv-cfifsvha6gdq1k7u46a0", staging: "srv-cmj6t6da73kc739ol660" }')[inputs.stage] }}
                  if [ "${{ inputs.stage }}" == "staging" ]; then
                    IMAGE="docker.io/nangohq/nango:${{ github.sha }}"
                    echo "Deploying $IMAGE to $SERVICE_ID"

                    curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                      --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                      --data "{ \"imageUrl\": \"$IMAGE\" }"
                  else
                    curl --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                          --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
                  fi

    deploy_jobs:
        if: inputs.service == 'jobs'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy jobs
              run: |
                  SERVICE_ID=${{ fromJson('{ production: "srv-clvvtdug1b2c73cklps0", staging: "srv-clthttda73kc73ejflg0" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_runners:
        if: inputs.service == 'runner'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy all runners
              env:
                  API_KEY: ${{ secrets.RENDER_API_KEY }}
                  ENVIRONMENT: ${{ inputs.stage }}
                  RUNNER_OWNER_ID: ${{ secrets.RENDER_RUNNER_OWNER_ID }}
                  INTERNAL_API_KEY: ${{ inputs.stage == 'production' && secrets.PROD_INTERNAL_API_KEY || secrets.STAGING_INTERNAL_API_KEY }}
              run: |
                  NANGO_API_HOSTNAME=${{ fromJson('{ "production": "api.nango.dev", "staging": "api-staging.nango.dev" }')[inputs.stage] }}
                  curl -sS --fail-with-body --request POST "https://$NANGO_API_HOSTNAME/internal/fleet/nango_runners/rollout" \
                    --header "authorization: Bearer $INTERNAL_API_KEY"\
                    --header "content-type: application/json"\
                    --data "{ \"image\": \"nangohq/nango:${{ github.sha }}\" }"

    deploy_persist:
        if: inputs.service == 'persist'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy persist
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-cmt150ol6cac73apstq0", "staging": "srv-cmsfiqqcn0vc73bhcod0" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_orchestrator:
        if: inputs.service == 'orchestrator'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy orchestrator
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-cp6bhl0l6cac738i3dm0", "staging": "srv-cp5qedsf7o1s739kjqtg" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_connect_ui:
        if: inputs.service == 'connect_ui'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy connect
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-crtut51u0jms73bts8fg", "staging": "srv-crv6gi68ii6s738m8u90" }')[inputs.stage] }}
                  COMMIT="${{ github.sha }}"

                  echo "Deploying $COMMIT to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"commitId\": \"$COMMIT\" }"
