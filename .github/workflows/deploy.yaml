name: '[Release] Deploy service'
run-name: '[Release] [${{ inputs.stage }}] Deploy ${{ inputs.service }}'

on:
    workflow_dispatch:
        inputs:
            stage:
                type: choice
                description: 'stage to deploy to, defaults to staging'
                required: true
                default: 'staging'
                options:
                    - staging
                    - production
            service:
                type: choice
                description: 'Service to deploy, defaults to server'
                required: true
                default: 'server'
                options:
                    - server
                    - jobs
                    - runner
                    - persist
                    - orchestrator
                    - metering
                    - connect_ui
                    - app_ui

jobs:
    deploy_app_ui_aws:
        if: inputs.stage == 'staging' && inputs.service == 'app_ui'
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install dependencies
              run: npm ci
            - name: Build Webapp
              run: npm run ts-build && npm run -w @nangohq/webapp build
            - name: Replace env.js source with api path in dist/index.html
              env:
                  API_DOMAIN: 'https://api-staging.nango.dev'
              run: |
                  FILE="packages/webapp/dist/index.html"
                  sed -E -i 's#(src=")/env\.js\?hash=([^"]+)#\1${{ env.API_DOMAIN }}/env.js?hash=\2#g' "$FILE"
            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.STAGING_DEPLOY_APP_UI_ROLE }}
                  role-session-name: GitHub_to_AWS_via_FederatedOIDC
                  aws-region: ${{ secrets.STAGING_AWS_REGION }}
            - name: Deploy Webapp to S3
              run: |
                  aws s3 sync packages/webapp/dist/ s3://${{ secrets.STAGING_APP_UI_BUCKET }} --delete
            - name: Create invalidation
              run: |
                  aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_APP_UI_DISTRIBUTION_ID }} --paths "/*"
    deploy_connect_ui_aws:
        if: inputs.stage == 'staging' && inputs.service == 'connect_ui'
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install dependencies
              run: npm ci
            - name: Build Connect UI
              run: npm run ts-build && npm run -w @nangohq/connect-ui build
            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.STAGING_DEPLOY_CONNECT_UI_ROLE }}
                  role-session-name: GitHub_to_AWS_via_FederatedOIDC
                  aws-region: ${{ secrets.STAGING_AWS_REGION }}
            - name: Deploy Connect UI to S3
              run: |
                  aws s3 sync packages/connect-ui/dist/ s3://${{ secrets.STAGING_CONNECT_UI_BUCKET }} --delete
            - name: Create invalidation
              run: |
                  aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CONNECT_UI_DISTRIBUTION_ID }} --paths "/*"

    deploy_aws:
        if: inputs.stage == 'staging' && inputs.service != 'runner' && inputs.service != 'connect_ui' && inputs.service != 'app_ui'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            actions: write
        steps:
            - name: Checkout nango-environments
              uses: actions/checkout@v4
              with:
                  repository: NangoHQ/nango-environments
                  token: ${{ secrets.NANGO_ENVIRONMENTS_PAT }}
                  path: nango-environments

            - name: Deploy ${{ inputs.service }} (AWS)
              run: |
                  cd nango-environments

                  # Configure git for the commit
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

                  # Update the nango-values.yaml file for the current stage and service
                  yq eval '.spec.values.${{ inputs.service }}.image.tag = "${{ github.sha }}"' -i apps/${{ inputs.stage }}/nango-values.yaml

                  # Commit and push the changes
                  git add apps/${{ inputs.stage }}/nango-values.yaml
                  git commit -m "Update ${{ inputs.service }} image tag to ${{ github.sha }} in ${{ inputs.stage }}"
                  git push origin main

    deploy_server:
        if: inputs.service == 'server'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Deploy server
              run: |
                  SERVICE_ID=${{ fromJson('{ production: "srv-cvmfsb3e5dus73f54g4g", staging: "srv-cmj6t6da73kc739ol660" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_jobs:
        if: inputs.service == 'jobs'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy jobs
              run: |
                  SERVICE_ID=${{ fromJson('{ production: "srv-clvvtdug1b2c73cklps0", staging: "srv-clthttda73kc73ejflg0" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_runners:
        if: inputs.service == 'runner'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy all runners
              env:
                  API_KEY: ${{ secrets.RENDER_API_KEY }}
                  ENVIRONMENT: ${{ inputs.stage }}
                  RUNNER_OWNER_ID: ${{ secrets.RENDER_RUNNER_OWNER_ID }}
                  INTERNAL_API_KEY: ${{ inputs.stage == 'production' && secrets.PROD_INTERNAL_API_KEY || secrets.STAGING_INTERNAL_API_KEY }}
              run: |
                  NANGO_API_HOSTNAME=${{ fromJson('{ "production": "api.nango.dev", "staging": "api-staging.nango.dev" }')[inputs.stage] }}
                  curl -sS --fail-with-body --request POST "https://$NANGO_API_HOSTNAME/internal/fleet/nango_runners/rollout" \
                    --header "authorization: Bearer $INTERNAL_API_KEY"\
                    --header "content-type: application/json"\
                    --data "{ \"image\": \"nangohq/nango:${{ github.sha }}\" }"

    deploy_persist:
        if: inputs.service == 'persist'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy persist
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-cmt150ol6cac73apstq0", "staging": "srv-cmsfiqqcn0vc73bhcod0" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_orchestrator:
        if: inputs.service == 'orchestrator'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy orchestrator
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-cp6bhl0l6cac738i3dm0", "staging": "srv-cp5qedsf7o1s739kjqtg" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_metering:
        if: inputs.service == 'metering'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy metering
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-d28h9aali9vc73db203g", "staging": "srv-d28gt2mmcj7s73bnmb30" }')[inputs.stage] }}
                  IMAGE="docker.io/nangohq/nango:${{ github.sha }}"

                  echo "Deploying $IMAGE to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"imageUrl\": \"$IMAGE\" }"

    deploy_connect_ui:
        if: inputs.service == 'connect_ui'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Deploy connect
              run: |
                  SERVICE_ID=${{ fromJson('{ "production": "srv-crtut51u0jms73bts8fg", "staging": "srv-crv6gi68ii6s738m8u90" }')[inputs.stage] }}
                  COMMIT="${{ github.sha }}"

                  echo "Deploying $COMMIT to $SERVICE_ID"

                  curl -sS --fail-with-body --request POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
                    --header "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"\
                    --data "{ \"commitId\": \"$COMMIT\" }"
