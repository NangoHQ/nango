// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`legacySyncModelsToJsonSchema > should handle all primitive types and basic features 1`] = `
{
  "definitions": {
    "AllPrimitiveTypes": {
      "properties": {
        "booleanField": {
          "type": "boolean",
        },
        "dateField": {
          "format": "date-time",
          "type": "string",
        },
        "numberArray": {
          "$ref": "#/definitions/number[] ",
        },
        "numberField": {
          "type": "number",
        },
        "optionalString": {
          "$ref": "#/definitions/string ",
        },
        "stringArray": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "stringField": {
          "type": "string",
        },
        "unknownType": {
          "$ref": "#/definitions/uuid",
        },
      },
      "required": [
        "stringField",
        "numberField",
        "booleanField",
        "dateField",
        "unknownType",
        "stringArray",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle arrays of models and primitives 1`] = `
{
  "definitions": {
    "Document": {
      "properties": {
        "collaborators": {
          "items": {
            "$ref": "#/definitions/User",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "tags": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "tags",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "email": {
          "type": "string",
        },
        "id": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "email",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle empty models array 1`] = `
{
  "definitions": {},
}
`;

exports[`legacySyncModelsToJsonSchema > should handle literal types 1`] = `
{
  "definitions": {
    "StatusModel": {
      "properties": {
        "status": {
          "oneOf": [
            {
              "const": "active",
            },
            {
              "const": "canceled",
            },
            {
              "const": "pending",
            },
          ],
        },
      },
      "required": [
        "status",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle model with no fields 1`] = `
{
  "definitions": {
    "EmptyModel": {
      "properties": {},
      "required": [],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle references to other models 1`] = `
{
  "definitions": {
    "Profile": {
      "properties": {
        "avatar": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
        "avatar",
      ],
      "type": "object",
    },
    "Role": {
      "properties": {
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "id": {
          "type": "string",
        },
        "profile": {
          "$ref": "#/definitions/Profile",
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/Role",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "profile",
        "roles",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle unions and optionals 1`] = `
{
  "definitions": {
    "Event": {
      "properties": {
        "id": {
          "type": "string",
        },
        "maybeModel": {
          "oneOf": [
            {
              "$ref": "#/definitions/Profile",
            },
            {
              "type": "null",
            },
          ],
        },
        "maybeString": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "status": {
          "oneOf": [
            {
              "$ref": "#/definitions/active",
            },
            {
              "$ref": "#/definitions/canceled",
            },
          ],
        },
      },
      "required": [
        "id",
        "status",
        "maybeModel",
      ],
      "type": "object",
    },
    "Profile": {
      "properties": {
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should still reference a non-existent model 1`] = `
{
  "definitions": {
    "HasMissingRef": {
      "properties": {
        "id": {
          "type": "string",
        },
        "missing": {
          "$ref": "#/definitions/NonExistentModel",
        },
      },
      "required": [
        "id",
        "missing",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should treat reference to a non-existent model as string 1`] = `
{
  "definitions": {
    "HasMissingRef": {
      "properties": {
        "id": {
          "type": "string",
        },
        "missing": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "missing",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle all primitive types and basic features 1`] = `
{
  "definitions": {
    "AllPrimitiveTypes": {
      "properties": {
        "booleanField": {
          "type": "boolean",
        },
        "dateField": {
          "format": "date-time",
          "type": "string",
        },
        "numberArray": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "numberField": {
          "type": "number",
        },
        "optionalString": {
          "type": "string",
        },
        "stringArray": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "stringField": {
          "type": "string",
        },
        "unknownType": {
          "additionalProperties": {
            "type": "string",
          },
          "type": "object",
        },
      },
      "required": [
        "stringField",
        "numberField",
        "booleanField",
        "dateField",
        "unknownType",
        "stringArray",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle circular model references 1`] = `
{
  "definitions": {
    "Category": {
      "properties": {
        "id": {
          "type": "string",
        },
        "name": {
          "type": "string",
        },
        "parentCategory": {
          "$ref": "#/definitions/Category",
        },
        "subcategories": {
          "items": {
            "$ref": "#/definitions/Category",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "name",
      ],
      "type": "object",
    },
    "Comment": {
      "properties": {
        "author": {
          "$ref": "#/definitions/User",
        },
        "content": {
          "type": "string",
        },
        "id": {
          "type": "string",
        },
        "post": {
          "$ref": "#/definitions/Post",
        },
        "replies": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "content",
        "author",
        "post",
      ],
      "type": "object",
    },
    "Post": {
      "properties": {
        "author": {
          "$ref": "#/definitions/User",
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "title": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "title",
        "author",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "comments": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/Post",
          },
          "type": "array",
        },
        "username": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "username",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle complex arrays with nested structures 1`] = `
{
  "definitions": {
    "ArrayShowcase": {
      "properties": {
        "flexibleArray": {
          "items": {
            "oneOf": [
              {
                "type": "string",
              },
              {
                "$ref": "#/definitions/Metadata",
              },
            ],
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "metadata": {
          "items": {
            "$ref": "#/definitions/Metadata",
          },
          "type": "array",
        },
        "scores": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "tags": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "tags",
        "metadata",
      ],
      "type": "object",
    },
    "Metadata": {
      "properties": {
        "key": {
          "type": "string",
        },
        "value": {
          "type": "string",
        },
      },
      "required": [
        "key",
        "value",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle empty models array 1`] = `
{
  "definitions": {},
}
`;

exports[`nangoModelsToJsonSchema > should handle model with no fields 1`] = `
{
  "definitions": {
    "EmptyModel": {
      "properties": {},
      "required": [],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle nested model references 1`] = `
{
  "definitions": {
    "Address": {
      "properties": {
        "city": {
          "type": "string",
        },
        "street": {
          "type": "string",
        },
        "zipCode": {
          "type": "string",
        },
      },
      "required": [
        "street",
        "city",
      ],
      "type": "object",
    },
    "Country": {
      "properties": {
        "code": {
          "type": "string",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "code",
        "name",
      ],
      "type": "object",
    },
    "DetailedAddress": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
        },
        "country": {
          "$ref": "#/definitions/Country",
        },
      },
      "required": [
        "address",
        "country",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address",
          },
          "type": "array",
        },
        "name": {
          "type": "string",
        },
        "primaryAddress": {
          "$ref": "#/definitions/DetailedAddress",
        },
      },
      "required": [
        "name",
        "primaryAddress",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle unions with primitives and models 1`] = `
{
  "definitions": {
    "Company": {
      "properties": {
        "companyName": {
          "type": "string",
        },
        "employees": {
          "type": "number",
        },
      },
      "required": [
        "companyName",
        "employees",
      ],
      "type": "object",
    },
    "FlexibleEntity": {
      "properties": {
        "entityUnion": {
          "oneOf": [
            {
              "$ref": "#/definitions/Person",
            },
            {
              "$ref": "#/definitions/Company",
            },
          ],
        },
        "id": {
          "type": "string",
        },
        "mixedUnion": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "items": {
                "$ref": "#/definitions/Tag",
              },
              "type": "array",
            },
          ],
        },
        "primitiveUnion": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "number",
            },
            {
              "type": "boolean",
            },
          ],
        },
      },
      "required": [
        "id",
        "primitiveUnion",
        "entityUnion",
      ],
      "type": "object",
    },
    "Person": {
      "properties": {
        "age": {
          "type": "number",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "age",
      ],
      "type": "object",
    },
    "Tag": {
      "properties": {
        "color": {
          "type": "string",
        },
        "label": {
          "type": "string",
        },
      },
      "required": [
        "label",
      ],
      "type": "object",
    },
  },
}
`;
