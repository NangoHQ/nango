// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`legacySyncModelsToJsonSchema > real-world examples > GoogleCalendarEvent 1`] = `
{
  "definitions": {
    "GoogleCalendarEvent": {
      "properties": {
        "attachments": {
          "properties": {
            "0": {
              "properties": {
                "fileId": {
                  "type": "string",
                },
                "fileUrl": {
                  "type": "string",
                },
                "iconLink": {
                  "type": "string",
                },
                "mimeType": {
                  "type": "string",
                },
                "title": {
                  "type": "string",
                },
              },
              "required": [
                "title",
                "fileId",
                "fileUrl",
                "iconLink",
                "mimeType",
              ],
              "type": "object",
            },
          },
          "required": [
            "0",
          ],
          "type": "object",
        },
        "attendees": {
          "properties": {
            "0": {
              "properties": {
                "additionalGuests": {
                  "type": "integer",
                },
                "comment": {
                  "type": "string",
                },
                "displayName": {
                  "type": "string",
                },
                "email": {
                  "type": "string",
                },
                "id": {
                  "type": "string",
                },
                "optional": {
                  "type": "boolean",
                },
                "organizer": {
                  "type": "boolean",
                },
                "resource": {
                  "type": "boolean",
                },
                "responseStatus": {
                  "type": "string",
                },
                "self": {
                  "type": "boolean",
                },
              },
              "required": [
                "id",
                "self",
                "email",
                "comment",
                "optional",
                "resource",
                "organizer",
                "displayName",
                "responseStatus",
                "additionalGuests",
              ],
              "type": "object",
            },
          },
          "required": [
            "0",
          ],
          "type": "object",
        },
        "conferenceData": {
          "properties": {
            "conferenceSolution": {
              "properties": {
                "iconUri": {
                  "type": "string",
                },
                "key": {
                  "properties": {
                    "type": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "type",
                  ],
                  "type": "object",
                },
                "name": {
                  "type": "string",
                },
              },
              "required": [
                "key",
                "name",
                "iconUri",
              ],
              "type": "object",
            },
            "createRequest": {
              "properties": {
                "conferenceSolutionKey": {
                  "properties": {
                    "type": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "type",
                  ],
                  "type": "object",
                },
                "requestId": {
                  "type": "string",
                },
                "status": {
                  "properties": {
                    "statusCode": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "statusCode",
                  ],
                  "type": "object",
                },
              },
              "required": [
                "status",
                "requestId",
                "conferenceSolutionKey",
              ],
              "type": "object",
            },
            "entryPoints": {
              "items": {
                "properties": {
                  "accessCode": {
                    "type": "string",
                  },
                  "entryPointType": {
                    "type": "string",
                  },
                  "label": {
                    "type": "string",
                  },
                  "meetingCode": {
                    "type": "string",
                  },
                  "passcode": {
                    "type": "string",
                  },
                  "password": {
                    "type": "string",
                  },
                  "pin": {
                    "type": "string",
                  },
                  "uri": {
                    "type": "string",
                  },
                },
                "required": [
                  "pin",
                  "uri",
                  "label",
                  "passcode",
                  "password",
                  "accessCode",
                  "meetingCode",
                  "entryPointType",
                ],
                "type": "object",
              },
              "type": "array",
            },
          },
          "required": [
            "createRequest",
            "entryPoints",
            "conferenceSolution",
          ],
          "type": "object",
        },
        "creator": {
          "properties": {
            "displayName": {
              "type": "string",
            },
            "email": {
              "type": "string",
            },
            "id": {
              "type": "string",
            },
            "self": {
              "type": "boolean",
            },
          },
          "required": [
            "id",
            "email",
            "displayName",
            "self",
          ],
          "type": "object",
        },
        "end": {
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string",
            },
            "string": {
              "type": "string",
            },
            "timeZone": {
              "type": "string",
            },
          },
          "required": [
            "date",
            "string",
            "timeZone",
          ],
          "type": "object",
        },
        "endTimeUnspecified": {
          "type": "boolean",
        },
        "eventType": {
          "type": "string",
        },
        "extendedProperties": {
          "properties": {
            "private": {
              "properties": {
                "key": {
                  "type": "string",
                },
              },
              "required": [
                "key",
              ],
              "type": "object",
            },
            "shared": {
              "properties": {
                "key": {
                  "type": "string",
                },
              },
              "required": [
                "key",
              ],
              "type": "object",
            },
          },
          "required": [
            "private",
            "shared",
          ],
          "type": "object",
        },
        "gadget": {
          "properties": {
            "preferences": {
              "properties": {
                "key": {
                  "type": "string",
                },
              },
              "required": [
                "key",
              ],
              "type": "object",
            },
          },
          "required": [
            "preferences",
          ],
          "type": "object",
        },
        "organizer": {
          "properties": {
            "displayName": {
              "type": "string",
            },
            "email": {
              "type": "string",
            },
            "id": {
              "type": "string",
            },
            "self": {
              "type": "boolean",
            },
          },
          "required": [
            "id",
            "email",
            "displayName",
            "self",
          ],
          "type": "object",
        },
        "originalStartTime": {
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string",
            },
            "dateTime": {
              "type": "string",
            },
            "timeZone": {
              "type": "string",
            },
          },
          "required": [
            "date",
            "dateTime",
            "timeZone",
          ],
          "type": "object",
        },
        "recurrence": {
          "properties": {
            "0": {
              "type": "string",
            },
          },
          "required": [
            "0",
          ],
          "type": "object",
        },
        "recurringEventId": {
          "type": "string",
        },
        "reminders": {
          "properties": {
            "overrides": {
              "items": {
                "properties": {
                  "method": {
                    "type": "string",
                  },
                  "minutes": {
                    "type": "integer",
                  },
                },
                "required": [
                  "method",
                  "minutes",
                ],
                "type": "object",
              },
              "type": "array",
            },
          },
          "required": [
            "overrides",
          ],
          "type": "object",
        },
        "source": {
          "properties": {
            "title": {
              "type": "string",
            },
            "url": {
              "type": "string",
            },
          },
          "required": [
            "url",
            "title",
          ],
          "type": "object",
        },
        "start": {
          "properties": {
            "date": {
              "format": "date-time",
              "type": "string",
            },
            "dateTime": {
              "type": "string",
            },
            "timeZone": {
              "type": "string",
            },
          },
          "required": [
            "date",
            "dateTime",
            "timeZone",
          ],
          "type": "object",
        },
        "workingLocationProperties": {
          "properties": {
            "customLocation": {
              "properties": {
                "label": {
                  "type": "string",
                },
              },
              "required": [
                "label",
              ],
              "type": "object",
            },
            "homeOffice": {
              "type": "string",
            },
            "officeLocation": {
              "properties": {
                "buildingId": {
                  "type": "string",
                },
                "deskId": {
                  "type": "string",
                },
                "floorId": {
                  "type": "string",
                },
                "floorSectionId": {
                  "type": "string",
                },
                "label": {
                  "type": "string",
                },
              },
              "required": [
                "label",
                "deskId",
                "floorId",
                "buildingId",
                "floorSectionId",
              ],
              "type": "object",
            },
            "type": {
              "type": "string",
            },
          },
          "required": [
            "type",
            "homeOffice",
            "customLocation",
            "officeLocation",
          ],
          "type": "object",
        },
      },
      "required": [
        "creator",
        "organizer",
        "start",
        "end",
        "endTimeUnspecified",
        "recurrence",
        "recurringEventId",
        "originalStartTime",
        "attendees",
        "extendedProperties",
        "conferenceData",
        "gadget",
        "reminders",
        "source",
        "workingLocationProperties",
        "attachments",
        "eventType",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle all primitive types and basic features 1`] = `
{
  "definitions": {
    "AllPrimitiveTypes": {
      "properties": {
        "anyField": {},
        "arrayField": {
          "items": {},
          "type": "array",
        },
        "boolField": {
          "type": "boolean",
        },
        "booleanField": {
          "type": "boolean",
        },
        "charField": {
          "type": "string",
        },
        "dateField": {
          "format": "date-time",
          "type": "string",
        },
        "falseField": {
          "const": false,
          "type": "boolean",
        },
        "floatField": {
          "type": "number",
        },
        "intField": {
          "type": "integer",
        },
        "integerField": {
          "type": "integer",
        },
        "literalUnion": {
          "oneOf": [
            {
              "const": "red",
              "type": "string",
            },
            {
              "const": "blue",
              "type": "string",
            },
          ],
        },
        "nullField": {
          "type": "null",
        },
        "numberArray": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "numberField": {
          "type": "number",
        },
        "objectField": {
          "type": "object",
        },
        "optionalString": {
          "type": "string",
        },
        "stringArray": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "stringField": {
          "type": "string",
        },
        "trueField": {
          "const": true,
          "type": "boolean",
        },
        "undefinedField": {
          "type": "null",
        },
        "unknownType": {
          "const": "uuid",
          "type": "string",
        },
        "varcharField": {
          "type": "string",
        },
      },
      "required": [
        "stringField",
        "charField",
        "varcharField",
        "numberField",
        "floatField",
        "intField",
        "integerField",
        "booleanField",
        "boolField",
        "trueField",
        "falseField",
        "dateField",
        "undefinedField",
        "nullField",
        "anyField",
        "objectField",
        "arrayField",
        "unknownType",
        "stringArray",
        "literalUnion",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle arrays of models and primitives 1`] = `
{
  "definitions": {
    "Document": {
      "properties": {
        "collaborators": {
          "items": {
            "$ref": "#/definitions/User",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "tags": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "tags",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "email": {
          "type": "string",
        },
        "id": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "email",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle empty models array 1`] = `
{
  "definitions": {},
}
`;

exports[`legacySyncModelsToJsonSchema > should handle inline objects 1`] = `
{
  "definitions": {
    "InlineObject": {
      "properties": {
        "object": {
          "properties": {
            "number": {
              "type": "number",
            },
            "string": {
              "type": "string",
            },
          },
          "required": [
            "string",
            "number",
          ],
          "type": "object",
        },
        "string": {
          "type": "string",
        },
      },
      "required": [
        "string",
        "object",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle model with no fields 1`] = `
{
  "definitions": {
    "EmptyModel": {
      "properties": {},
      "required": [],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle nested fields separated by dots 1`] = `
{
  "definitions": {
    "NestedFields": {
      "properties": {
        "nested": {
          "properties": {
            "number": {
              "type": "number",
            },
            "object": {
              "properties": {
                "inlineObject": {
                  "properties": {
                    "number": {
                      "type": "number",
                    },
                    "string": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "string",
                    "number",
                  ],
                  "type": "object",
                },
              },
              "required": [
                "inlineObject",
              ],
              "type": "object",
            },
            "string": {
              "type": "string",
            },
          },
          "required": [
            "string",
            "number",
            "object",
            "object",
            "object",
          ],
          "type": "object",
        },
        "string": {
          "type": "string",
        },
      },
      "required": [
        "string",
        "nested",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle optionals from name 1`] = `
{
  "definitions": {
    "Model": {
      "properties": {
        "optionalNumber": {
          "type": "number",
        },
        "optionalString": {
          "type": "string",
        },
        "requiredNumber": {
          "type": "number",
        },
        "requiredString": {
          "type": "string",
        },
      },
      "required": [
        "requiredString",
        "requiredNumber",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle references to other models 1`] = `
{
  "definitions": {
    "Profile": {
      "properties": {
        "avatar": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
        "avatar",
      ],
      "type": "object",
    },
    "Role": {
      "properties": {
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "id": {
          "type": "string",
        },
        "profile": {
          "$ref": "#/definitions/Profile",
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/Role",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "profile",
        "roles",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle unions and optionals 1`] = `
{
  "definitions": {
    "Event": {
      "properties": {
        "id": {
          "type": "string",
        },
        "maybeModel": {
          "oneOf": [
            {
              "$ref": "#/definitions/Profile",
            },
            {
              "type": "null",
            },
          ],
        },
        "maybeString": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "status": {
          "oneOf": [
            {
              "const": "active",
              "type": "string",
            },
            {
              "const": "canceled",
              "type": "string",
            },
          ],
        },
      },
      "required": [
        "id",
        "status",
        "maybeModel",
      ],
      "type": "object",
    },
    "Profile": {
      "properties": {
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should not reference a non-existent model 1`] = `
{
  "definitions": {
    "HasMissingRef": {
      "properties": {
        "id": {
          "type": "string",
        },
        "missing": {
          "const": "NonExistentModel",
          "type": "string",
        },
      },
      "required": [
        "id",
        "missing",
      ],
      "type": "object",
    },
  },
}
`;
