// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`legacySyncModelsToJsonSchema > should handle all primitive types and basic features 1`] = `
{
  "definitions": {
    "AllPrimitiveTypes": {
      "properties": {
        "anyField": {},
        "arrayField": {
          "items": {},
          "type": "array",
        },
        "boolField": {
          "type": "boolean",
        },
        "booleanField": {
          "type": "boolean",
        },
        "charField": {
          "type": "string",
        },
        "dateField": {
          "format": "date-time",
          "type": "string",
        },
        "falseField": {
          "const": false,
          "type": "boolean",
        },
        "floatField": {
          "type": "number",
        },
        "intField": {
          "type": "integer",
        },
        "integerField": {
          "type": "integer",
        },
        "literalUnion": {
          "oneOf": [
            {
              "const": "red",
              "type": "string",
            },
            {
              "const": "blue",
              "type": "string",
            },
          ],
        },
        "nullField": {
          "type": "null",
        },
        "numberArray": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "numberField": {
          "type": "number",
        },
        "objectField": {
          "type": "object",
        },
        "optionalString": {
          "type": "string",
        },
        "stringArray": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "stringField": {
          "type": "string",
        },
        "trueField": {
          "const": true,
          "type": "boolean",
        },
        "undefinedField": {
          "type": "null",
        },
        "unknownType": {
          "const": "uuid",
          "type": "string",
        },
        "varcharField": {
          "type": "string",
        },
      },
      "required": [
        "stringField",
        "charField",
        "varcharField",
        "numberField",
        "floatField",
        "intField",
        "integerField",
        "booleanField",
        "boolField",
        "trueField",
        "falseField",
        "dateField",
        "undefinedField",
        "nullField",
        "anyField",
        "objectField",
        "arrayField",
        "unknownType",
        "stringArray",
        "literalUnion",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle arrays of models and primitives 1`] = `
{
  "definitions": {
    "Document": {
      "properties": {
        "collaborators": {
          "items": {
            "$ref": "#/definitions/User",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "tags": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "tags",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "email": {
          "type": "string",
        },
        "id": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "email",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle empty models array 1`] = `
{
  "definitions": {},
}
`;

exports[`legacySyncModelsToJsonSchema > should handle model with no fields 1`] = `
{
  "definitions": {
    "EmptyModel": {
      "properties": {},
      "required": [],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle references to other models 1`] = `
{
  "definitions": {
    "Profile": {
      "properties": {
        "avatar": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
        "avatar",
      ],
      "type": "object",
    },
    "Role": {
      "properties": {
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "id": {
          "type": "string",
        },
        "profile": {
          "$ref": "#/definitions/Profile",
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/Role",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "profile",
        "roles",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should handle unions and optionals 1`] = `
{
  "definitions": {
    "Event": {
      "properties": {
        "id": {
          "type": "string",
        },
        "maybeModel": {
          "oneOf": [
            {
              "$ref": "#/definitions/Profile",
            },
            {
              "type": "null",
            },
          ],
        },
        "maybeString": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "null",
            },
          ],
        },
        "status": {
          "oneOf": [
            {
              "const": "active",
              "type": "string",
            },
            {
              "const": "canceled",
              "type": "string",
            },
          ],
        },
      },
      "required": [
        "id",
        "status",
        "maybeModel",
      ],
      "type": "object",
    },
    "Profile": {
      "properties": {
        "bio": {
          "type": "string",
        },
      },
      "required": [
        "bio",
      ],
      "type": "object",
    },
  },
}
`;

exports[`legacySyncModelsToJsonSchema > should still reference a non-existent model 1`] = `
{
  "definitions": {
    "HasMissingRef": {
      "properties": {
        "id": {
          "type": "string",
        },
        "missing": {
          "const": "NonExistentModel",
          "type": "string",
        },
      },
      "required": [
        "id",
        "missing",
      ],
      "type": "object",
    },
  },
}
`;
