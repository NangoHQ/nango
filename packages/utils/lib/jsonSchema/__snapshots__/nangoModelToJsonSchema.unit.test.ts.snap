// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`nangoModelsToJsonSchema > should handle all primitive types and basic features 1`] = `
{
  "definitions": {
    "AllPrimitiveTypes": {
      "properties": {
        "booleanField": {
          "type": "boolean",
        },
        "dateField": {
          "format": "date-time",
          "type": "string",
        },
        "numberArray": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "numberField": {
          "type": "number",
        },
        "optionalString": {
          "type": "string",
        },
        "stringArray": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "stringField": {
          "type": "string",
        },
        "unknownType": {
          "const": "uuid",
          "type": "string",
        },
      },
      "required": [
        "stringField",
        "numberField",
        "booleanField",
        "dateField",
        "unknownType",
        "stringArray",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle arrays of nested models 1`] = `
{
  "definitions": {
    "ModelWithNestedModelArray": {
      "properties": {
        "nestedModels": {
          "items": {
            "properties": {
              "firstName": {
                "type": "string",
              },
              "lastName": {
                "type": "string",
              },
            },
            "required": [
              "firstName",
              "lastName",
            ],
            "type": "object",
          },
          "type": "array",
        },
      },
      "required": [
        "nestedModels",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle circular model references 1`] = `
{
  "definitions": {
    "Category": {
      "properties": {
        "id": {
          "type": "string",
        },
        "name": {
          "type": "string",
        },
        "parentCategory": {
          "$ref": "#/definitions/Category",
        },
        "subcategories": {
          "items": {
            "$ref": "#/definitions/Category",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "name",
      ],
      "type": "object",
    },
    "Comment": {
      "properties": {
        "author": {
          "$ref": "#/definitions/User",
        },
        "content": {
          "type": "string",
        },
        "id": {
          "type": "string",
        },
        "post": {
          "$ref": "#/definitions/Post",
        },
        "replies": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "content",
        "author",
        "post",
      ],
      "type": "object",
    },
    "Post": {
      "properties": {
        "author": {
          "$ref": "#/definitions/User",
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "title": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "title",
        "author",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "comments": {
          "items": {
            "$ref": "#/definitions/Comment",
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/Post",
          },
          "type": "array",
        },
        "username": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "username",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle complex arrays with nested structures 1`] = `
{
  "definitions": {
    "ArrayShowcase": {
      "properties": {
        "flexibleArray": {
          "items": {
            "oneOf": [
              {
                "type": "string",
              },
              {
                "$ref": "#/definitions/Metadata",
              },
            ],
          },
          "type": "array",
        },
        "id": {
          "type": "string",
        },
        "metadata": {
          "items": {
            "$ref": "#/definitions/Metadata",
          },
          "type": "array",
        },
        "scores": {
          "items": {
            "type": "number",
          },
          "type": "array",
        },
        "tags": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "id",
        "tags",
        "metadata",
      ],
      "type": "object",
    },
    "Metadata": {
      "properties": {
        "key": {
          "type": "string",
        },
        "value": {
          "type": "string",
        },
      },
      "required": [
        "key",
        "value",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle dynamic fields 1`] = `
{
  "definitions": {
    "DynamicFields": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/Field",
          },
          "type": "array",
        },
      },
      "required": [
        "fields",
      ],
      "type": "object",
    },
    "Field": {
      "properties": {
        "__string": {
          "oneOf": [
            {
              "$ref": "#/definitions/Field",
            },
            {
              "type": "string",
            },
          ],
        },
      },
      "required": [
        "__string",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle empty models array 1`] = `
{
  "definitions": {},
}
`;

exports[`nangoModelsToJsonSchema > should handle literals 1`] = `
{
  "definitions": {
    "Literals": {
      "properties": {
        "lie": {
          "const": false,
          "type": "boolean",
        },
        "numberLiteral": {
          "const": 1,
          "type": "number",
        },
        "numberLiteralUnion": {
          "oneOf": [
            {
              "const": 1,
              "type": "number",
            },
            {
              "const": 2,
              "type": "number",
            },
            {
              "const": 3,
              "type": "number",
            },
          ],
        },
        "stringLiteral": {
          "const": "nango",
          "type": "string",
        },
        "stringLiteralUnion": {
          "oneOf": [
            {
              "const": "nango",
              "type": "string",
            },
            {
              "const": "mongo",
              "type": "string",
            },
          ],
        },
        "truth": {
          "const": true,
          "type": "boolean",
        },
      },
      "required": [
        "stringLiteral",
        "stringLiteralUnion",
        "truth",
        "lie",
        "numberLiteral",
        "numberLiteralUnion",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle model with no fields 1`] = `
{
  "definitions": {
    "EmptyModel": {
      "properties": {},
      "required": [],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle nested model references 1`] = `
{
  "definitions": {
    "Address": {
      "properties": {
        "city": {
          "type": "string",
        },
        "street": {
          "type": "string",
        },
        "zipCode": {
          "type": "string",
        },
      },
      "required": [
        "street",
        "city",
      ],
      "type": "object",
    },
    "Country": {
      "properties": {
        "code": {
          "type": "string",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "code",
        "name",
      ],
      "type": "object",
    },
    "DetailedAddress": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
        },
        "country": {
          "$ref": "#/definitions/Country",
        },
      },
      "required": [
        "address",
        "country",
      ],
      "type": "object",
    },
    "User": {
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address",
          },
          "type": "array",
        },
        "name": {
          "type": "string",
        },
        "primaryAddress": {
          "$ref": "#/definitions/DetailedAddress",
        },
      },
      "required": [
        "name",
        "primaryAddress",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle nested objects 1`] = `
{
  "definitions": {
    "LinearTeamBase": {
      "properties": {
        "id": {
          "type": "string",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "id",
        "name",
      ],
      "type": "object",
    },
    "TeamsPaginatedResponse": {
      "properties": {
        "pageInfo": {
          "properties": {
            "endCursor": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "null",
                },
              ],
            },
            "hasNextPage": {
              "type": "boolean",
            },
          },
          "required": [
            "hasNextPage",
            "endCursor",
          ],
          "type": "object",
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/LinearTeamBase",
          },
          "type": "array",
        },
      },
      "required": [
        "teams",
        "pageInfo",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle special cases 1`] = `
{
  "definitions": {
    "SpecialCases": {
      "properties": {
        "array": {
          "items": {},
          "type": "array",
        },
        "bigint": {
          "type": "number",
        },
        "nullValue": {
          "type": "null",
        },
        "undefinedValue": {
          "type": "null",
        },
      },
      "required": [
        "nullValue",
        "undefinedValue",
        "bigint",
        "array",
      ],
      "type": "object",
    },
  },
}
`;

exports[`nangoModelsToJsonSchema > should handle unions with primitives and models 1`] = `
{
  "definitions": {
    "Company": {
      "properties": {
        "companyName": {
          "type": "string",
        },
        "employees": {
          "type": "number",
        },
      },
      "required": [
        "companyName",
        "employees",
      ],
      "type": "object",
    },
    "FlexibleEntity": {
      "properties": {
        "entityUnion": {
          "oneOf": [
            {
              "$ref": "#/definitions/Person",
            },
            {
              "$ref": "#/definitions/Company",
            },
          ],
        },
        "id": {
          "type": "string",
        },
        "mixedUnion": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "items": {
                "$ref": "#/definitions/Tag",
              },
              "type": "array",
            },
          ],
        },
        "primitiveUnion": {
          "oneOf": [
            {
              "type": "string",
            },
            {
              "type": "number",
            },
            {
              "type": "boolean",
            },
          ],
        },
      },
      "required": [
        "id",
        "primitiveUnion",
        "entityUnion",
      ],
      "type": "object",
    },
    "Person": {
      "properties": {
        "age": {
          "type": "number",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "age",
      ],
      "type": "object",
    },
    "Tag": {
      "properties": {
        "color": {
          "type": "string",
        },
        "label": {
          "type": "string",
        },
      },
      "required": [
        "label",
      ],
      "type": "object",
    },
  },
}
`;
