// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bundleFile > should bundle a sync with a constant export 1`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/cli/fixtures/zero/valid/github/syncs/fetchIssues.ts
var fetchIssues_exports = {};
__export(fetchIssues_exports, {
  default: () => fetchIssues_default
});
module.exports = __toCommonJS(fetchIssues_exports);
var z = __toESM(require("zod"), 1);
var LIMIT = 100;
var issueSchema = z.object({
  id: z.string(),
  owner: z.string(),
  repo: z.string(),
  issue_number: z.number(),
  title: z.string(),
  state: z.string(),
  author: z.string(),
  author_id: z.number(),
  body: z.string(),
  date_created: z.string(),
  date_last_modified: z.string()
});
var sync = {
  type: "sync",
  description: \`Fetches the Github issues from all a user's repositories.\`,
  version: "1.0.0",
  endpoints: [{
    method: "GET",
    path: "/example/github/issues",
    group: "Issues"
  }],
  frequency: "every hour",
  autoStart: true,
  syncType: "full",
  trackDeletes: true,
  metadata: z.void(),
  models: {
    GithubIssue: issueSchema
  },
  // Sync execution
  exec: async (nango) => {
    const repos = await getAllRepositories(nango);
    for (const repo of repos) {
      const proxyConfig = {
        endpoint: \`/repos/\${repo.owner.login}/\${repo.name}/issues\`,
        paginate: {
          limit: LIMIT
        }
      };
      for await (const issueBatch of nango.paginate(proxyConfig)) {
        const issues = issueBatch.filter((issue) => !("pull_request" in issue));
        const mappedIssues = issues.map((issue) => ({
          id: issue.id,
          owner: repo.owner.login,
          repo: repo.name,
          issue_number: issue.number,
          title: issue.title,
          state: issue.state,
          author: issue.user.login,
          author_id: issue.user.id,
          body: issue.body,
          date_created: issue.created_at,
          date_last_modified: issue.updated_at
        }));
        if (mappedIssues.length > 0) {
          await nango.batchSave(mappedIssues, "GithubIssue");
          await nango.log(\`Sent \${mappedIssues.length} issues from \${repo.owner.login}/\${repo.name}\`);
        }
      }
    }
  },
  // Webhook handler
  onWebhook: async (nango, payload) => {
    await nango.log("This is a webhook script", payload);
  }
};
var fetchIssues_default = sync;
async function getAllRepositories(nango) {
  const records = [];
  const proxyConfig = {
    endpoint: "/user/repos",
    paginate: {
      limit: LIMIT
    }
  };
  for await (const recordBatch of nango.paginate(proxyConfig)) {
    records.push(...recordBatch);
  }
  return records;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGFja2FnZXMvY2xpL2ZpeHR1cmVzL3plcm8vdmFsaWQvZ2l0aHViL3N5bmNzL2ZldGNoSXNzdWVzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBjcmVhdGVTeW5jIH0gZnJvbSAnbmFuZ28nO1xuaW1wb3J0ICogYXMgeiBmcm9tICd6b2QnO1xuY29uc3QgTElNSVQgPSAxMDA7XG5jb25zdCBpc3N1ZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIG93bmVyOiB6LnN0cmluZygpLFxuICByZXBvOiB6LnN0cmluZygpLFxuICBpc3N1ZV9udW1iZXI6IHoubnVtYmVyKCksXG4gIHRpdGxlOiB6LnN0cmluZygpLFxuICBzdGF0ZTogei5zdHJpbmcoKSxcbiAgYXV0aG9yOiB6LnN0cmluZygpLFxuICBhdXRob3JfaWQ6IHoubnVtYmVyKCksXG4gIGJvZHk6IHouc3RyaW5nKCksXG4gIGRhdGVfY3JlYXRlZDogei5zdHJpbmcoKSxcbiAgZGF0ZV9sYXN0X21vZGlmaWVkOiB6LnN0cmluZygpXG59KTtcbnR5cGUgR2l0aHViSXNzdWUgPSB6LmluZmVyPHR5cGVvZiBpc3N1ZVNjaGVtYT47XG5jb25zdCBzeW5jID0ge1xuICB0eXBlOiBcInN5bmNcIixcbiAgZGVzY3JpcHRpb246IGBGZXRjaGVzIHRoZSBHaXRodWIgaXNzdWVzIGZyb20gYWxsIGEgdXNlcidzIHJlcG9zaXRvcmllcy5gLFxuICB2ZXJzaW9uOiAnMS4wLjAnLFxuICBlbmRwb2ludHM6IFt7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2V4YW1wbGUvZ2l0aHViL2lzc3VlcycsXG4gICAgZ3JvdXA6ICdJc3N1ZXMnXG4gIH1dLFxuICBmcmVxdWVuY3k6ICdldmVyeSBob3VyJyxcbiAgYXV0b1N0YXJ0OiB0cnVlLFxuICBzeW5jVHlwZTogJ2Z1bGwnLFxuICB0cmFja0RlbGV0ZXM6IHRydWUsXG4gIG1ldGFkYXRhOiB6LnZvaWQoKSxcbiAgbW9kZWxzOiB7XG4gICAgR2l0aHViSXNzdWU6IGlzc3VlU2NoZW1hXG4gIH0sXG4gIC8vIFN5bmMgZXhlY3V0aW9uXG4gIGV4ZWM6IGFzeW5jIG5hbmdvID0+IHtcbiAgICBjb25zdCByZXBvcyA9IGF3YWl0IGdldEFsbFJlcG9zaXRvcmllcyhuYW5nbyk7XG4gICAgZm9yIChjb25zdCByZXBvIG9mIHJlcG9zKSB7XG4gICAgICBjb25zdCBwcm94eUNvbmZpZyA9IHtcbiAgICAgICAgZW5kcG9pbnQ6IGAvcmVwb3MvJHtyZXBvLm93bmVyLmxvZ2lufS8ke3JlcG8ubmFtZX0vaXNzdWVzYCxcbiAgICAgICAgcGFnaW5hdGU6IHtcbiAgICAgICAgICBsaW1pdDogTElNSVRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZvciBhd2FpdCAoY29uc3QgaXNzdWVCYXRjaCBvZiBuYW5nby5wYWdpbmF0ZShwcm94eUNvbmZpZykpIHtcbiAgICAgICAgY29uc3QgaXNzdWVzID0gaXNzdWVCYXRjaC5maWx0ZXIoaXNzdWUgPT4gISgncHVsbF9yZXF1ZXN0JyBpbiBpc3N1ZSkpO1xuICAgICAgICBjb25zdCBtYXBwZWRJc3N1ZXM6IEdpdGh1Yklzc3VlW10gPSBpc3N1ZXMubWFwKGlzc3VlID0+ICh7XG4gICAgICAgICAgaWQ6IGlzc3VlLmlkLFxuICAgICAgICAgIG93bmVyOiByZXBvLm93bmVyLmxvZ2luLFxuICAgICAgICAgIHJlcG86IHJlcG8ubmFtZSxcbiAgICAgICAgICBpc3N1ZV9udW1iZXI6IGlzc3VlLm51bWJlcixcbiAgICAgICAgICB0aXRsZTogaXNzdWUudGl0bGUsXG4gICAgICAgICAgc3RhdGU6IGlzc3VlLnN0YXRlLFxuICAgICAgICAgIGF1dGhvcjogaXNzdWUudXNlci5sb2dpbixcbiAgICAgICAgICBhdXRob3JfaWQ6IGlzc3VlLnVzZXIuaWQsXG4gICAgICAgICAgYm9keTogaXNzdWUuYm9keSxcbiAgICAgICAgICBkYXRlX2NyZWF0ZWQ6IGlzc3VlLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgZGF0ZV9sYXN0X21vZGlmaWVkOiBpc3N1ZS51cGRhdGVkX2F0XG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKG1hcHBlZElzc3Vlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYXdhaXQgbmFuZ28uYmF0Y2hTYXZlKG1hcHBlZElzc3VlcywgJ0dpdGh1Yklzc3VlJyk7XG4gICAgICAgICAgYXdhaXQgbmFuZ28ubG9nKGBTZW50ICR7bWFwcGVkSXNzdWVzLmxlbmd0aH0gaXNzdWVzIGZyb20gJHtyZXBvLm93bmVyLmxvZ2lufS8ke3JlcG8ubmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgLy8gV2ViaG9vayBoYW5kbGVyXG4gIG9uV2ViaG9vazogYXN5bmMgKG5hbmdvLCBwYXlsb2FkKSA9PiB7XG4gICAgYXdhaXQgbmFuZ28ubG9nKCdUaGlzIGlzIGEgd2ViaG9vayBzY3JpcHQnLCBwYXlsb2FkKTtcbiAgfVxufTtcbmV4cG9ydCB0eXBlIE5hbmdvU3luY0xvY2FsID0gUGFyYW1ldGVyczwodHlwZW9mIHN5bmMpWydleGVjJ10+WzBdO1xuZXhwb3J0IGRlZmF1bHQgc3luYztcbmFzeW5jIGZ1bmN0aW9uIGdldEFsbFJlcG9zaXRvcmllcyhuYW5nbzogTmFuZ29TeW5jTG9jYWwpOiBQcm9taXNlPGFueVtdPiB7XG4gIGNvbnN0IHJlY29yZHM6IGFueVtdID0gW107XG4gIGNvbnN0IHByb3h5Q29uZmlnID0ge1xuICAgIGVuZHBvaW50OiAnL3VzZXIvcmVwb3MnLFxuICAgIHBhZ2luYXRlOiB7XG4gICAgICBsaW1pdDogTElNSVRcbiAgICB9XG4gIH07XG4gIGZvciBhd2FpdCAoY29uc3QgcmVjb3JkQmF0Y2ggb2YgbmFuZ28ucGFnaW5hdGUocHJveHlDb25maWcpKSB7XG4gICAgcmVjb3Jkcy5wdXNoKC4uLnJlY29yZEJhdGNoKTtcbiAgfVxuICByZXR1cm4gcmVjb3Jkcztcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7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
"
`;

exports[`bundleFile > should bundle an action with a default export 1`] = `
""use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/cli/fixtures/zero/valid/github/actions/createIssue.ts
var createIssue_exports = {};
__export(createIssue_exports, {
  action: () => action,
  default: () => createIssue_default
});
module.exports = __toCommonJS(createIssue_exports);
var z = __toESM(require("zod"), 1);
var issueSchema = z.object({
  id: z.string(),
  owner: z.string(),
  repo: z.string(),
  issue_number: z.number(),
  title: z.string(),
  state: z.string(),
  author: z.string(),
  author_id: z.number(),
  body: z.string(),
  date_created: z.string(),
  date_last_modified: z.string()
});
var action = {
  type: "action",
  description: \`Create an issue in GitHub\`,
  version: "1.0.0",
  endpoint: {
    method: "POST",
    path: "/example/github/issues",
    group: "Issues"
  },
  input: issueSchema,
  output: z.void(),
  // Action execution
  exec: async (nango, input) => {
    await nango.proxy({
      endpoint: "/repos/NangoHQ/interactive-demo/issues",
      data: {
        title: \`[demo] \${input.title}\`,
        body: \`This issue was created automatically using Nango Action.\`,
        labels: ["automatic"]
      }
    });
  }
};
var createIssue_default = action;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  action
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicGFja2FnZXMvY2xpL2ZpeHR1cmVzL3plcm8vdmFsaWQvZ2l0aHViL2FjdGlvbnMvY3JlYXRlSXNzdWUudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGNyZWF0ZUFjdGlvbiB9IGZyb20gJ25hbmdvJztcbmltcG9ydCAqIGFzIHogZnJvbSAnem9kJztcbmNvbnN0IGlzc3VlU2NoZW1hID0gei5vYmplY3Qoe1xuICBpZDogei5zdHJpbmcoKSxcbiAgb3duZXI6IHouc3RyaW5nKCksXG4gIHJlcG86IHouc3RyaW5nKCksXG4gIGlzc3VlX251bWJlcjogei5udW1iZXIoKSxcbiAgdGl0bGU6IHouc3RyaW5nKCksXG4gIHN0YXRlOiB6LnN0cmluZygpLFxuICBhdXRob3I6IHouc3RyaW5nKCksXG4gIGF1dGhvcl9pZDogei5udW1iZXIoKSxcbiAgYm9keTogei5zdHJpbmcoKSxcbiAgZGF0ZV9jcmVhdGVkOiB6LnN0cmluZygpLFxuICBkYXRlX2xhc3RfbW9kaWZpZWQ6IHouc3RyaW5nKClcbn0pO1xuZXhwb3J0IGNvbnN0IGFjdGlvbiA9IHtcbiAgdHlwZTogXCJhY3Rpb25cIixcbiAgZGVzY3JpcHRpb246IGBDcmVhdGUgYW4gaXNzdWUgaW4gR2l0SHViYCxcbiAgdmVyc2lvbjogJzEuMC4wJyxcbiAgZW5kcG9pbnQ6IHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBwYXRoOiAnL2V4YW1wbGUvZ2l0aHViL2lzc3VlcycsXG4gICAgZ3JvdXA6ICdJc3N1ZXMnXG4gIH0sXG4gIGlucHV0OiBpc3N1ZVNjaGVtYSxcbiAgb3V0cHV0OiB6LnZvaWQoKSxcbiAgLy8gQWN0aW9uIGV4ZWN1dGlvblxuICBleGVjOiBhc3luYyAobmFuZ28sIGlucHV0KSA9PiB7XG4gICAgYXdhaXQgbmFuZ28ucHJveHkoe1xuICAgICAgZW5kcG9pbnQ6ICcvcmVwb3MvTmFuZ29IUS9pbnRlcmFjdGl2ZS1kZW1vL2lzc3VlcycsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRpdGxlOiBgW2RlbW9dICR7aW5wdXQudGl0bGV9YCxcbiAgICAgICAgYm9keTogYFRoaXMgaXNzdWUgd2FzIGNyZWF0ZWQgYXV0b21hdGljYWxseSB1c2luZyBOYW5nbyBBY3Rpb24uYCxcbiAgICAgICAgbGFiZWxzOiBbJ2F1dG9tYXRpYyddXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBhY3Rpb247Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsUUFBbUI7QUFDbkIsSUFBTSxjQUFnQixTQUFPO0FBQUEsRUFDM0IsSUFBTSxTQUFPO0FBQUEsRUFDYixPQUFTLFNBQU87QUFBQSxFQUNoQixNQUFRLFNBQU87QUFBQSxFQUNmLGNBQWdCLFNBQU87QUFBQSxFQUN2QixPQUFTLFNBQU87QUFBQSxFQUNoQixPQUFTLFNBQU87QUFBQSxFQUNoQixRQUFVLFNBQU87QUFBQSxFQUNqQixXQUFhLFNBQU87QUFBQSxFQUNwQixNQUFRLFNBQU87QUFBQSxFQUNmLGNBQWdCLFNBQU87QUFBQSxFQUN2QixvQkFBc0IsU0FBTztBQUMvQixDQUFDO0FBQ00sSUFBTSxTQUFTO0FBQUEsRUFDcEIsTUFBTTtBQUFBLEVBQ04sYUFBYTtBQUFBLEVBQ2IsU0FBUztBQUFBLEVBQ1QsVUFBVTtBQUFBLElBQ1IsUUFBUTtBQUFBLElBQ1IsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUNBLE9BQU87QUFBQSxFQUNQLFFBQVUsT0FBSztBQUFBO0FBQUEsRUFFZixNQUFNLE9BQU8sT0FBTyxVQUFVO0FBQzVCLFVBQU0sTUFBTSxNQUFNO0FBQUEsTUFDaEIsVUFBVTtBQUFBLE1BQ1YsTUFBTTtBQUFBLFFBQ0osT0FBTyxVQUFVLE1BQU0sS0FBSztBQUFBLFFBQzVCLE1BQU07QUFBQSxRQUNOLFFBQVEsQ0FBQyxXQUFXO0FBQUEsTUFDdEI7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQ0Y7QUFDQSxJQUFPLHNCQUFROyIsCiAgIm5hbWVzIjogW10KfQo=
"
`;

exports[`edge cases > should catch invalid setMergingStrategy 1`] = `
[Error: err - ./zero/cases/setMergingStrategy.error.ts:20 
  setMergingStrategy should be called before any proxy function
]
`;
