// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateModelsTs > should generate models.ts 1`] = `
"import { z } from "zod";

export const Model = z.object({
  id: z.string(),
  arrTsType: z.string().array(),
  null: z.nullable(),
  bool: z.boolean(),
  any: z.any(),
  opt: z.number().optional(),
  ref: z.literal("Foo").optional(),
  union: z.union([z.literal("literal1"), z.literal("literal2")]),
  array: z.array(z.union([z.literal("arr1"), z.literal("arr2")])),

  obj: z.object({
    nes: z.literal("ted")
  }),

  dynamicObj: z.object({}).catchall(z.literal("date")),
  union2: z.union([Model, Model.array()]),
  dateOrNull: z.date().optional()
});

export type Model = z.infer<typeof Model>;

export const ModelDynamic = z.object({
  id: z.string()
}).catchall(z.string());

export type ModelDynamic = z.infer<typeof ModelDynamic>;

export const Metadata = z.object({
  foo: z.literal("bar"),
  model: Model
});

export type Metadata = z.infer<typeof Metadata>;

export const IssueInput = z.object({
  title: z.string(),
  body: z.string()
});

export type IssueInput = z.infer<typeof IssueInput>;

export const IssueOutput = z.object({
  id: z.string(),
  status: z.string()
});

export type IssueOutput = z.infer<typeof IssueOutput>;

export const models = {
  Model: Model,
  ModelDynamic: ModelDynamic,
  Metadata: Metadata,
  IssueInput: IssueInput,
  IssueOutput: IssueOutput
};"
`;

exports[`transformAction > should transform an action 1`] = `
"import { IssueInput, IssueOutput } from "../../models";
import { createAction } from "nango";
import type { NangoAction } from "nango";

export default createAction({
  description: "Test action",
  version: "1.0.0",

  endpoint: {
    method: "POST",
    path: "/example/github/issues",
    group: "Issues"
  },

  input: IssueInput,
  output: IssueOutput,
  scopes: ["repo"],

  exec: async (nango, input) => {
    await nango.log("âœ… hello from action");
    return {
      id: '123',
      status: 'open'
    }
  }
});

function foobar(nango: NangoAction) {
   nango.batchSave([{}], 'Model');
}"
`;

exports[`transformOnEvents > should transform an on-event script 1`] = `
"import { createOnEvent } from "nango";

export default createOnEvent({
  event: "pre-connection-deletion",
  description: "pre-connection-deletion event handler",

  exec: async nango => {
    await nango.log("test pre script");
  }
});"
`;

exports[`transformSync > should transform a sync 1`] = `
"import { Metadata, Model, ModelDynamic } from "../../models";
import { createSync } from "nango";
import type { ProxyConfiguration, NangoSync } from "nango";

export default createSync({
  description: "Test sync",
  version: "1.2.3",
  runs: "every hour",
  autoStart: true,
  syncType: "full",
  trackDeletes: false,

  endpoints: [{
    method: "GET",
    path: "top",
    group: "foobar"
  }],

  webhookSubscriptions: ["*"],
  scopes: ["repo", "user"],

  models: {
    Model: Model,
    ModelDynamic: ModelDynamic
  },

  metadata: Metadata,

  exec: async nango => {
      await nango.log('hello');
      await nango.batchSave([{
          'id': 'foobar',
      }], 'Model');

  },

  onWebhook: async (nango, payload) => {
    await nango.log('Received webhook', payload);
    await nango.batchSave([{}], 'Model');
    const proxyConfig: ProxyConfiguration = {
      endpoint: '/issues',
      retries: 15,
    };
  }
});

function foobar(nango: NangoSync) {
   nango.batchSave([{}], 'Model');
}"
`;
