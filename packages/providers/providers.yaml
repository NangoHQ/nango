# yaml-language-server: $schema=./../../scripts/validation/providers/schema.json
1password-scim:
    display_name: 1Password (SCIM)
    categories:
        - other
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.domain}/scim
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /Users
    docs: https://docs.nango.dev/integrations/all/1password-scim
    docs_connect: https://docs.nango.dev/integrations/all/1password-scim/connect
    connection_config:
        domain:
            type: string
            title: 1Password SCIM Bridge URL
            description: The domain for your 1Password SCIM Bridge
            example: scim.example.com
            pattern: '^[a-zA-Z0-9.-]+$'
            prefix: https://
            doc_section: '#step-2-get-your-scim-bridge-url'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: Your 1Password SCIM API Key
            secret: true
            doc_section: '#step-1-retrieve-your-1password-scim-api-key'
accelo:
    display_name: Accelo
    categories:
        - invoicing
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.api.accelo.com/oauth2/v0/authorize
    token_url: https://${connectionConfig.subdomain}.api.accelo.com/oauth2/v0/token
    scope_separator: ','
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://${connectionConfig.subdomain}.api.accelo.com
    docs: https://docs.nango.dev/integrations/all/accelo
    connection_config:
        subdomain:
            type: string
            title: Accelo Domain
            description: The subdomain of your Accelo account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .api.accelo.com
            prefix: https://

active-campaign:
    display_name: ActiveCampaign
    categories:
        - marketing
        - communication
    auth_mode: API_KEY
    proxy:
        headers:
            api-token: ${apiKey}
        base_url: https://${connectionConfig.hostname}/api
        verification:
            method: GET
            endpoints:
                - /3/users/me
    docs: https://docs.nango.dev/integrations/all/active-campaign
    docs_connect: https://docs.nango.dev/integrations/all/active-campaign/connect
    connection_config:
        hostname:
            type: string
            title: Hostname
            description: The Hostname for your ActiveCampaign account
            format: hostname
            prefix: https://
            example: company.activehosted.com
            doc_section: '#step-1-finding-your-hostname'
            order: 1
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API Key for your ActiveCampaign account
            pattern: '^[a-f0-9]{72}$'
            example: b4f1a7c9d8e56320a9db472fe6c8351f2e0a4d98b7f6c3e5d9a2f4701b3e8d6c3455abbe
            doc_section: '#step-2-finding-your-api-key'

acuity-scheduling:
    display_name: Acuity Scheduling
    categories:
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://acuityscheduling.com/oauth2/authorize
    token_url: https://acuityscheduling.com/oauth2/token
    default_scopes:
        - api-v1
    proxy:
        base_url: https://acuityscheduling.com/api/v1
    docs: https://docs.nango.dev/integrations/all/acuity-scheduling

adobe:
    display_name: Adobe
    categories:
        - design
    auth_mode: OAUTH2
    authorization_url: https://ims-na1.adobelogin.com/ims/authorize/v2
    token_url: https://ims-na1.adobelogin.com/ims/token/v3
    default_scopes:
        - offline_access
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://ims-na1.adobelogin.com/ims
    docs: https://docs.nango.dev/integrations/all/adobe

adobe-umapi:
    display_name: UMAPI (Adobe User Management API)
    categories:
        - other
    auth_mode: OAUTH2_CC
    token_url: https://ims-na1.adobelogin.com/ims/token/v2
    scope_separator: ','
    token_params:
        grant_type: client_credentials
    proxy:
        headers:
            x-api-key: ${connectionConfig.clientId}
        retry:
            after: 'retry-after'
        base_url: https://usermanagement.adobe.io
    docs: https://docs.nango.dev/integrations/all/adobe-umapi
    post_connection_script: adobeUmapiPostConnection
    docs_connect: https://docs.nango.dev/integrations/all/adobe-umapi/connect
    connection_config:
        clientId:
            type: string
            title: ''
            description: ''
            automated: true

adp:
    display_name: ADP
    auth_mode: OAUTH2_CC
    categories:
        - hr
    proxy:
        base_url: https://api.adp.com
    token_url: https://accounts.adp.com/auth/oauth/v2/token
    token_params:
        grant_type: client_credentials
    docs: https://docs.nango.dev/integrations/all/adp
    docs_connect: https://docs.nango.dev/integrations/all/adp/connect

adyen:
    display_name: Adyen
    categories:
        - payment
    auth_mode: OAUTH2
    authorization_url: https://ca-${connectionConfig.environment}.adyen.com/ca/ca/oauth/connect.shtml
    token_url: https://oauth-${connectionConfig.environment}.adyen.com/v1/token
    scope_separator: ' '
    token_request_auth_method: basic
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://${connectionConfig.resource}-${connectionConfig.environment}.adyen.com
    docs: https://docs.nango.dev/integrations/all/adyen
    connection_config:
        environment:
            type: string
            title: Environment
            description: The environment to use
            pattern: '^(live|test)$'
            example: live|test
        resource:
            type: string
            title: Resource
            description: The resource to use for your various requests
            pattern: '^[a-z0-9_-]+$'
            example: kyc
            suffix: -(live|test).adyen.com
            prefix: https://

affinity:
    display_name: Affinity
    categories:
        - crm
    auth_mode: BASIC
    proxy:
        base_url: https://api.affinity.co
        verification:
            method: GET
            endpoints:
                - /lists
    docs: https://docs.nango.dev/integrations/all/affinity
    docs_connect: https://docs.nango.dev/integrations/all/affinity/connect
    credentials:
        username:
            type: string
            title: ''
            description: ''
            default_value: ''
            hidden: true
        password:
            type: string
            title: API Key
            description: Your Affinity API Key
            # https://api-docs.affinity.co/#introduction
            # Affinity is using basic auth with an api key
            doc_section: '#step-1-finding-your-api-key'

aircall:
    display_name: Aircall (OAuth)
    categories:
        - support
    auth_mode: OAUTH2
    authorization_url: https://dashboard.aircall.io/oauth/authorize
    token_url: https://api.aircall.io/v1/oauth/token
    authorization_params:
        response_type: code
        scope: public_api
    token_params:
        grant_type: authorization_code
    proxy:
        base_url: https://api.aircall.io
        retry:
            at: 'x-aircallapi-reset'
        paginate:
            type: link
            link_path_in_response_body: meta.next_page_link
            response_path: results
    docs: https://docs.nango.dev/integrations/all/aircall

aircall-basic:
    alias: aircall
    display_name: Aircall (Basic Auth)
    auth_mode: BASIC
    proxy:
        base_url: https://api.aircall.io
        verification:
            method: GET
            endpoints:
                - /v1/ping
        paginate:
            type: link
            link_path_in_response_body: meta.next_page_link
            response_path: results
    docs_connect: https://docs.nango.dev/integrations/all/aircall-basic/connect
    docs: https://docs.nango.dev/integrations/all/aircall-basic
    credentials:
        username:
            type: string
            title: API ID
            description: The Application ID (API ID) for your Aircall account
            pattern: '^[a-zA-Z0-9_-]+$'
            doc_section: '#step-1-finding-your-admin-api-key-api-token-and-application-id-api-id'
        password:
            type: string
            title: API Token
            description: The Admin API Key (API Token) for your Aircall account
            pattern: '^[a-zA-Z0-9_-]+$'
            secret: true
            doc_section: '#step-1-finding-your-admin-api-key-api-token-and-application-id-api-id'
airtable:
    display_name: Airtable
    categories:
        - popular
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://airtable.com/oauth2/v1/authorize
    token_url: https://airtable.com/oauth2/v1/token
    authorization_method: header
    auth:
        response_type: code
    proxy:
        base_url: https://api.airtable.com
    webhook_routing_script: airtableWebhookRouting
    docs: https://docs.nango.dev/integrations/all/airtable

airtable-pat:
    display_name: Airtable (Personal Access Token)
    categories:
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://api.airtable.com
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/airtable-pat
    docs_connect: https://docs.nango.dev/integrations/all/airtable-pat/connect
    credentials:
        apiKey:
            type: string
            title: Personal Access Token
            description: The Personal Access Token for your Airtable account
            example: 'patoXxYzA1B2C3D4Ef.98a7b6c5d4e3f2g1h0i9j8k7l6m5n4o3p2q1r0s9t8u7v6w5x4y3z2a1b0cdef'
            pattern: '^[a-zA-Z0-9\.]+$'
            doc_section: '#step-1-generating-your-personal-access-token'

autodesk:
    display_name: Autodesk
    categories:
        - design
    auth_mode: OAUTH2
    authorization_url: https://developer.api.autodesk.com/authentication/v2/authorize
    token_url: https://developer.api.autodesk.com/authentication/v2/token
    scope_separator: ' '
    disable_pkce: true
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://developer.api.autodesk.com
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/autodesk

algolia:
    display_name: Algolia
    categories:
        - search
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.APP_ID}.algolia.net
        headers:
            x-algolia-application-id: ${connectionConfig.APP_ID}
            x-algolia-api-key: ${apiKey}
        verification:
            endpoints:
                - /1/keys/${credentials.apiKey}
    docs: https://docs.nango.dev/integrations/all/algolia
    docs_connect: https://docs.nango.dev/integrations/all/algolia/connect
    connection_config:
        APP_ID:
            type: string
            title: Application ID
            description: The application ID for your Algolia account
            example: ERBSOWZO32
            pattern: '^[A-Z0-9]{10}$'
            order: 1
            doc_section: '#step-1-finding-your-application-id'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Algolia account
            example: c5c28261f9ade4e34891ccf761491b94
            pattern: '^[a-zA-Z0-9]+$'
            doc_section: '#step-2-finding-your-admin-api-key'

amazon:
    display_name: Amazon
    categories:
        - dev-tools
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://www.amazon.com/ap/oa
    token_url: https://api.amazon.${connectionConfig.extension}/auth/o2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.amazon.com
    docs: https://docs.nango.dev/integrations/all/amazon
    connection_config:
        extension:
            type: string
            title: Domain Extension
            description: The domain extension for your Amazon account
            example: com
            pattern: '^[a-z.]+$'

amazon-selling-partner:
    display_name: Amazon Selling Partner
    categories:
        - dev-tools
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.domain}/apps/authorize/consent
    token_url: https://api.amazon.com/auth/o2/token
    authorization_code_param_in_callback: spapi_oauth_code
    disable_pkce: true
    authorization_params:
        application_id: ${connectionConfig.applicationId}
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://sellingpartnerapi-${connectionConfig.region}.amazon.com
        headers:
            x-amz-access-token: ${accessToken}
    docs: https://docs.nango.dev/integrations/all/amazon-selling-partner
    docs_connect: https://docs.nango.dev/integrations/all/amazon-selling-partner/connect
    connection_config:
        applicationId:
            type: string
            title: Application ID
            description: The unique identifier for your Amazon Selling Partner application
            example: 'amzn1.sellerapps.app.0bf296b5-36a6-4942-a13e-EXAMPLEfcd28'
            pattern: '^[a-zA-Z0-9.-]+$'
            doc_section: '#step-1-finding-your-app-id'
            order: 1
        domain:
            type: string
            title: Domain
            description: The domain representing the Amazon platform you are integrating with
            example: sellercentral.amazon.com
            pattern: '^[a-z0-9.-]+\.amazon\.[a-z.]+$'
            doc_section: '#step-2-finding-your-domain'
            order: 2
        region:
            type: string
            title: Proxy BaseUrl Region
            description: The geographical region associated with the Amazon marketplace.
            example: eu
            pattern: '^[a-z]+$'
            doc_section: '#step-3-finding-your-proxy-baseurl-region'
            order: 3

amazon-selling-partner-beta:
    display_name: Amazon Selling Partner (Beta)
    categories:
        - dev-tools
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.domain}/apps/authorize/consent
    token_url: https://api.amazon.com/auth/o2/token
    authorization_code_param_in_callback: spapi_oauth_code
    disable_pkce: true
    authorization_params:
        application_id: ${connectionConfig.applicationId}
        version: beta
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://sandbox.sellingpartnerapi-${connectionConfig.region}.amazon.com
        headers:
            x-amz-access-token: ${accessToken}
    docs: https://docs.nango.dev/integrations/all/amazon-selling-partner-beta
    docs_connect: https://docs.nango.dev/integrations/all/amazon-selling-partner-beta/connect
    connection_config:
        applicationId:
            type: string
            title: Application ID
            description: The unique identifier for your Amazon Selling Partner application
            example: 'amzn1.sellerapps.app.0bf296b5-36a6-4942-a13e-EXAMPLEfcd28'
            pattern: '^[a-zA-Z0-9.-]+$'
            doc_section: '#step-1-finding-your-app-id'
            order: 1
        domain:
            type: string
            title: Domain
            description: The domain representing the Amazon platform you are integrating with
            example: sellercentral.amazon.com
            pattern: '^[a-z0-9.-]+\.amazon\.[a-z.]+$'
            doc_section: '#step-2-finding-your-domain'
            order: 2
        region:
            type: string
            title: Proxy BaseUrl Region
            description: The geographical region associated with the Amazon marketplace.
            example: eu
            pattern: '^[a-z]+$'
            doc_section: '#step-3-finding-your-proxy-baseurl-region'
            order: 3

anrok:
    display_name: Anrok
    categories:
        - legal
    auth_mode: API_KEY
    proxy:
        base_url: https://api.anrok.com
        headers:
            authorization: Bearer ${apiKey}
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/anrok
    docs_connect: https://docs.nango.dev/integrations/all/anrok/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Anrok account
            doc_section: '#step-1-finding-your-api-key'

amplitude:
    display_name: Amplitude (Event Streaming API)
    categories:
        - analytics
    auth_mode: BASIC
    proxy:
        base_url: https://amplitude.com
        verification:
            method: GET
            endpoints:
                - /api/2/events/list
    docs: https://docs.nango.dev/integrations/all/amplitude
    credentials:
        username:
            type: string
            title: API Key
            description: Your Amplitude API Key
        password:
            type: string
            title: Secret Key
            description: Your Amplitude secret key
            # https://amplitude.com/docs/apis/authentication
            # Amplitude is using basic auth with an api key

anthropic:
    display_name: Anthropic
    categories:
        - productivity
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.anthropic.com
        headers:
            x-api-key: ${apiKey}
            anthropic-version: ${connectionConfig.version}
            content-type: application/json
        retry:
            after: 'retry-after'
        verification:
            method: GET
            endpoints:
                - v1/models
    docs: https://docs.nango.dev/integrations/all/anthropic
    connection_config:
        version:
            type: string
            title: API Version
            description: The version of the Anthropic API to use
            pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
            example: '2023-06-01'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Anthropic account

anthropic-admin:
    display_name: Anthropic Administrator
    categories:
        - productivity
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.anthropic.com
        headers:
            x-api-key: ${apiKey}
            anthropic-version: ${connectionConfig.version}
            content-type: application/json
        retry:
            after: 'retry-after'
        verification:
            method: GET
            endpoints:
                - /v1/organizations/users
    docs: https://docs.nango.dev/integrations/all/anthropic-admin
    connection_config:
        version:
            type: string
            title: API Version
            description: The version of the Anthropic API to use
            pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
            example: '2023-06-01'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The Admin API key for your Anthropic account

apaleo:
    display_name: Apaleo
    categories:
        - erp
    auth_mode: OAUTH2
    authorization_url: https://identity.apaleo.com/connect/authorize
    token_url: https://identity.apaleo.com/connect/token
    scope_separator: ' '
    token_params:
        grant_type: authorization_code
    authorization_params:
        response_type: code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.apaleo.com
        headers:
            content-type: application/json
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/apaleo

apollo:
    display_name: Apollo (API Key)
    categories:
        - marketing
    auth_mode: API_KEY
    proxy:
        headers:
            x-api-key: ${apiKey}
        base_url: https://app.apollo.io/api
    docs: https://docs.nango.dev/integrations/all/apollo
    credentials_verification_script: apolloCredentialsVerification
    docs_connect: https://docs.nango.dev/integrations/all/apollo/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Apollo account
            example: eh_3LUIFtj04rG4KF_FoFw
            doc_section: '#step-1-finding-your-api-key'

apollo-oauth:
    display_name: Apollo (OAuth)
    categories:
        - marketing
    auth_mode: OAUTH2
    authorization_url: https://app.apollo.io
    token_url: https://app.apollo.io/api/v1/oauth/token
    authorization_url_fragment: oauth/authorize
    body_format: json
    disable_pkce: true
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://app.apollo.io/api
    docs: https://docs.nango.dev/integrations/all/apollo-oauth

apple-app-store:
    display_name: Apple App Store
    auth_mode: APP_STORE
    token_url: https://api.appstoreconnect.apple.com/v1/apps
    authorization_params:
        audience: appstoreconnect-v1
    proxy:
        base_url: https://api.appstoreconnect.apple.com
    docs: https://docs.nango.dev/integrations/all/apple-app-store

appstle-subscriptions:
    display_name: Appstle Subscriptions
    categories:
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://subscription-admin.appstle.com
        headers:
            x-api-key: ${apiKey}
    docs: https://docs.nango.dev/integrations/all/appstle-subscriptions
    docs_connect: https://docs.nango.dev/integrations/all/appstle-subscriptions/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: Your Appstle Subscriptions API Key
            secret: true
            doc_section: '#step-1-finding-your-api-key'
            example: lBfFAdbxUxyv6jYRgOmrEVNkijCKD10T
            pattern: ^[a-zA-Z0-9]+$

asana:
    display_name: Asana
    categories:
        - productivity
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://app.asana.com/-/oauth_authorize
    token_url: https://app.asana.com/-/oauth_token
    token_params:
        grant_type: authorization_code
    auth:
        response_type: code
    default_scopes:
        - default
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://app.asana.com
        retry:
            after: 'retry-after'
        paginate:
            type: cursor
            cursor_path_in_response: next_page.offset
            cursor_name_in_request: offset
            response_path: data
            limit_name_in_request: limit
    docs: https://docs.nango.dev/integrations/all/asana

asana-scim:
    display_name: Asana (SCIM API)
    categories:
        - productivity
        - ticketing
    auth_mode: API_KEY
    proxy:
        base_url: https://app.asana.com/api
        verification:
            method: GET
            endpoints:
                - /1.0/scim/Users
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/asana-scim
    docs_connect: https://docs.nango.dev/integrations/all/asana-scim/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Asana scim account
            doc_section: '#step-1-finding-asana-api-key'

ashby:
    display_name: Ashby
    categories:
        - ats
        - popular
    auth_mode: BASIC
    proxy:
        base_url: https://api.ashbyhq.com
        verification:
            method: POST
            endpoints:
                - apiKey.info
    docs: https://docs.nango.dev/integrations/all/ashby
    credentials:
        username:
            type: string
            title: API Key
            description: The API Key of your Ashby account
        password:
            type: string
            title: ''
            description: ''
            default_value: ''
            hidden: true

atlas-so:
    display_name: Atlas.so
    categories:
        - support
    auth_mode: API_KEY
    proxy:
        headers:
            authorization: Bearer ${apiKey}
        base_url: https://api.atlas.so/v1
    docs: https://docs.nango.dev/integrations/all/atlas-so
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Atlas.so account

atlassian:
    display_name: Atlassian
    categories:
        - dev-tools
    auth_mode: OAUTH2
    authorization_url: https://auth.atlassian.com/authorize
    token_url: https://auth.atlassian.com/oauth/token
    default_scopes:
        - offline_access
    authorization_params:
        response_type: code
        audience: api.atlassian.com
        prompt: consent
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.atlassian.com
    docs: https://docs.nango.dev/integrations/all/atlassian

attio:
    display_name: Attio
    categories:
        - crm
    auth_mode: OAUTH2
    authorization_url: https://app.attio.com/authorize
    token_url: https://app.attio.com/oauth/token
    token_params:
        grant_type: authorization_code
    auth:
        response_type: code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.attio.com
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/attio

auth0:
    display_name: Auth0
    categories:
        - other
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.auth0.com/authorize
    token_url: https://${connectionConfig.subdomain}.auth0.com/oauth/token
    authorization_params:
        response_type: code
        response_mode: query
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    docs: https://docs.nango.dev/integrations/all/auth0
    proxy:
        base_url: https://${connectionConfig.subdomain}.auth0.com
    connection_config:
        subdomain:
            type: string
            title: Auth0 Domain
            description: The subdomain of your Auth0 account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .auth0.com
            prefix: https://

auth0-cc:
    display_name: Auth0 (Client Credentials)
    categories:
        - other
    auth_mode: OAUTH2_CC
    body_format: json
    token_url: https://${connectionConfig.hostname}/oauth/token
    token_params:
        grant_type: client_credentials
        audience: ${connectionConfig.audience}
        organization: ${connectionConfig.organization}
    docs: https://docs.nango.dev/integrations/all/auth0-cc
    docs_connect: https://docs.nango.dev/integrations/all/auth0-cc/connect
    proxy:
        base_url: https://${connectionConfig.hostname}
    connection_config:
        hostname:
            type: string
            title: HostName
            description: Your Auth0 host name
            format: hostname
            prefix: https://
            doc_section: '#step-2-finding-your-hostname'
        audience:
            type: string
            title: Audience
            description: The audience for the token
            example: https://api.example.com/foobar
            doc_section: '#step-3-finding-your-audience'
        organization:
            type: string
            title: Organization
            description: The organization name you want the request to be associated with
            example: example
            optional: true
            doc_section: '#step-4-finding-your-organization'

avalara:
    display_name: Avalara
    categories:
        - legal
    auth_mode: BASIC
    proxy:
        headers:
            x-avalara-client: ${connectionConfig.avalaraClient}
            content-type: application/json
        base_url: https://rest.avatax.com/api/v2
        verification:
            method: GET
            endpoints:
                - /utilities/subscriptions
    docs: https://docs.nango.dev/integrations/all/avalara
    docs_connect: https://docs.nango.dev/integrations/all/avalara/connect
    credentials:
        username:
            type: string
            title: User Name / Account ID
            description: Avalara User Name / Account ID
            doc_section: '#step-1-finding-your-pair-keys'
        password:
            type: string
            title: Avalara Password / License Key
            description: Your Password / License Key
            # https://developer.avalara.com/avatax/authentication-in-rest/
            # Avalara is using basic auth with combination of (username and password)
            # or (Account ID and License Key)
            doc_section: '#step-1-finding-your-pair-keys'
    connection_config:
        avalaraClient:
            type: string
            title: Avalara Client
            description: The Avalara client for your Avalara account
            doc_section: '#step-2-generating-an-avalara-client'

avalara-sandbox:
    display_name: Avalara (Sandbox)
    categories:
        - legal
    auth_mode: BASIC
    proxy:
        headers:
            x-avalara-client: ${connectionConfig.avalaraClient}
            content-type: application/json
        base_url: https://sandbox-rest.avatax.com/api/v2
        verification:
            method: GET
            endpoints:
                - /utilities/subscriptions
    docs: https://docs.nango.dev/integrations/all/avalara-sandbox
    docs_connect: https://docs.nango.dev/integrations/all/avalara-sandbox/connect
    credentials:
        username:
            type: string
            title: User Name / Account ID
            description: Avalara User Name / Account ID
            doc_section: '#step-1-finding-your-pair-keys'
        password:
            type: string
            title: Password / License Key
            description: Avalara Password / License Key
            # https://developer.avalara.com/avatax/authentication-in-rest/
            # Avalara is using basic auth with combination of (username and password)
            # or (Account ID and License Key)
            doc_section: '#step-1-finding-your-pair-keys'
    connection_config:
        avalaraClient:
            type: string
            title: Avalara Client
            description: The Avalara client for your Avalara account
            doc_section: '#step-2-generating-an-avalara-client'

aws:
    display_name: AWS
    categories:
        - dev-tools
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.auth.${connectionConfig.extension}.amazoncognito.com/oauth2/authorize
    token_url: https://${connectionConfig.subdomain}.auth.${connectionConfig.extension}.amazoncognito.com/oauth2/token
    token_params:
        grant_type: authorization_code
    auth:
        response_type: code
    refresh_params:
        grant_type: refresh_token
    default_scopes:
        - openid
    proxy:
        base_url: https://cognito-${apiSubdomain}.amazonaws.com
    docs: https://docs.nango.dev/integrations/all/aws
    connection_config:
        subdomain:
            type: string
            title: AWS Domain
            description: The subdomain of your AWS account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .amazoncognito.com
            prefix: https://
        extension:
            type: string
            title: Domain Extension
            description: The domain extension of your AWS account
            example: com
            pattern: '^[a-z.]+$'
        apiSubdomain:
            type: string
            title: API Subdomain
            description: The API subdomain to the API you want to connect to
            example: idp.us-east-2
            pattern: '^[a-z.-]+$'
            suffix: .amazonaws.com
            prefix: https://cognito-

aws-iam:
    display_name: AWS IAM
    categories:
        - dev-tools
    auth_mode: BASIC
    proxy:
        base_url: https://iam.amazonaws.com
        connection_config:
            region: ${connectionConfig.region}
        retry:
            at: 'x-ratelimit-reset'
    credentials_verification_script: awsIamCredentialsVerification
    docs: https://docs.nango.dev/integrations/all/aws-iam
    docs_connect: https://docs.nango.dev/integrations/all/aws-iam/connect
    credentials:
        username:
            type: string
            title: AWS Access Key ID
            description: Your Access Key ID
            doc_section: '#step-1-finding-your-pair-keys'
        password:
            type: string
            title: AWS Secret Access Key
            description: Your Secret Access Key
            # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html
            # aws-iam is using basic auth with AWS Access Key ID and Secret Access Key
            doc_section: '#step-1-finding-your-pair-keys'
    connection_config:
        region:
            type: string
            title: Region
            description: The region to where your AWS account is hosted
            example: us-east-1
            pattern: '^[a-z0-9-]+$'
            doc_section: '#step-2-finding-your-region-host'

azure-devops:
    display_name: Azure DevOps
    categories:
        - dev-tools
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.organizationUrl}
    docs: https://docs.nango.dev/integrations/all/azure-devops
    docs_connect: https://docs.nango.dev/integrations/all/azure-devops/connect
    # Azure DevOps returns a 202 when the credentials are invalid,
    # so we need to explicitly check for this and return respective error message
    credentials_verification_script: azureDevopsCredentialsVerification
    connection_config:
        organizationUrl:
            type: string
            title: Organization URL
            description: The URL of your Azure DevOps organization
            example: dev.azure.com/myorg or myorg.visualstudio.com
            doc_section: '#step-1-finding-your-organization-url'
            prefix: https://
    credentials:
        username:
            type: string
            title: ''
            description: ''
            default_value: ''
            hidden: true
        password:
            type: string
            title: Personal Access Token
            description: The Personal Access Token of your Azure DevOps account
            doc_section: '#step-2-creating-a-personal-access-token'

bamboohr:
    display_name: BambooHR (OAuth)
    categories:
        - hr
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.bamboohr.com/authorize.php
    token_url: https://${connectionConfig.subdomain}.bamboohr.com/token.php
    authorization_params:
        response_type: code
        request: authorize
    token_params:
        grant_type: authorization_code
        request: token
    proxy:
        base_url: https://api.bamboohr.com/api/gateway.php/${connectionConfig.subdomain}
    docs: https://docs.nango.dev/integrations/all/bamboohr
    connection_config:
        subdomain:
            type: string
            title: BambooHR Domain
            description: The subdomain of your BambooHR account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .bamboohr.com
            prefix: https://
            order: 1

bamboohr-basic:
    display_name: BambooHR (Basic Auth)
    categories:
        - hr
    auth_mode: BASIC
    proxy:
        base_url: https://api.bamboohr.com/api/gateway.php/${connectionConfig.subdomain}
        verification:
            method: GET
            endpoints:
                - /v1/meta/fields
    docs: https://docs.nango.dev/integrations/all/bamboohr-basic
    docs_connect: https://docs.nango.dev/integrations/all/bamboohr-basic/connect
    connection_config:
        subdomain:
            type: string
            title: BambooHR Domain
            description: The subdomain of your BambooHR account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .bamboohr.com
            prefix: https://
            order: 1
            doc_section: '#step-1-finding-your-subdomain'
    credentials:
        username:
            type: string
            title: API key
            description: The API Key of your BambooHR account
            pattern: '^[a-zA-Z0-9]+$'
            secret: true
            doc_section: '#step-2-finding-your-api-key'
        password:
            type: string
            title: Password
            description: Password
            # https://documentation.bamboohr.com/docs/getting-started
            # Bamboo HR is using basic auth with an api key
            default_value: x
            hidden: true

basecamp:
    display_name: Basecamp
    categories:
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://launchpad.37signals.com/authorization/new
    token_url: https://launchpad.37signals.com/authorization/token
    authorization_params:
        type: web_server
    token_params:
        type: web_server
    refresh_params:
        type: refresh
    proxy:
        base_url: https://3.basecampapi.com/${connectionConfig.accountId}
        headers:
            user-agent: ${connectionConfig.appDetails} || App (support@nango.dev)
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/basecamp
    docs_connect: https://docs.nango.dev/integrations/all/basecamp/connect
    post_connection_script: basecampPostConnection
    connection_config:
        appDetails:
            type: string
            title: App Details
            description: The details of your app
            automated: true
        accountId:
            type: string
            title: Account ID
            description: Your Account ID
            optional: true
            example: '5899981'
            pattern: '^[0-9]+$'
            doc_section: '#step-1-finding-your-account-id'

battlenet:
    display_name: Battle.net
    categories:
        - gaming
    auth_mode: OAUTH2
    authorization_url: https://oauth.battle.${connectionConfig.extension}/authorize
    token_url: https://oauth.battle.${connectionConfig.extension}/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    proxy:
        base_url: https://${connectionConfig.apiDomain}
    docs: https://docs.nango.dev/integrations/all/battlenet
    connection_config:
        extension:
            type: string
            title: Domain Extension
            description: The domain extension of your Battle.net account
            example: com
            pattern: '^[a-z.]+$'
            order: 1
        apiDomain:
            type: string
            title: API Domain
            description: The domain to where you will access your API
            example: us.api.blizzard.com
            pattern: '^[a-z.]+$'
            prefix: https://

beehiiv:
    display_name: Beehiiv
    categories:
        - communication
        - marketing
    auth_mode: API_KEY
    proxy:
        headers:
            authorization: Bearer ${apiKey}
        base_url: https://api.beehiiv.com/v2/publications/${connectionConfig.publicationId}
        verification:
            method: GET
            endpoints:
                - /posts
    docs: https://docs.nango.dev/integrations/all/beehiiv
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Beehiiv account
            example: 8ab3sjxqvHzyUnP9JhvlfT6C0wsbgr5XQrpaZZjxJkYBPy6sntvT1M2Lk94VQeRb
            pattern: '^[a-zA-Z0-9]{64}$'
    connection_config:
        publicationId:
            type: string
            title: Publication Id
            description: The prefixed ID of the publication object
            example: pub_a3d1b49e-2a5d-4f4b-97c8-8f32e1d2f7b9
            pattern: '^(pub_[0-9a-fA-F\-]+)$'

bigcommerce:
    display_name: BigCommerce
    categories:
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://login.bigcommerce.com/oauth2/authorize
    token_url: https://login.bigcommerce.com/oauth2/token
    scope_separator: ' '
    authorization_params:
        response_type: code
        context: stores/${connectionConfig.storeHash}
        account_uuid: ${connectionConfig.accountUuid}
    token_params:
        context: stores/${connectionConfig.storeHash}
        grant_type: authorization_code
    proxy:
        base_url: https://api.bigcommerce.com/stores/${connectionConfig.storeHash}
    docs: https://docs.nango.dev/integrations/all/bigcommerce
    connection_config:
        storeHash:
            type: string
            title: Store Hash
            description: The store hash of your BigCommerce account
            pattern: '^[a-zA-Z0-9]+$'
        accountUuid:
            type: string
            title: Account UUID
            description: The account UUID of your BigCommerce account
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000

bill-sandbox:
    display_name: Bill (Connect API Sandbox)
    categories:
        - payment
    auth_mode: BILL
    token_url: https://gateway.stage.bill.com/connect/v3/login
    proxy:
        base_url: https://gateway.stage.bill.com/connect
    docs: https://docs.nango.dev/integrations/all/bill-sandbox
    docs_connect: https://docs.nango.dev/integrations/all/bill-sandbox/connect

bill:
    display_name: Bill (Connect API)
    categories:
        - payment
    auth_mode: BILL
    token_url: https://gateway.prod.bill.com/connect/v3/login
    proxy:
        base_url: https://gateway.prod.bill.com/connect
    docs: https://docs.nango.dev/integrations/all/bill

bitbucket:
    display_name: Bitbucket
    categories:
        - dev-tools
    auth_mode: OAUTH2
    authorization_url: https://bitbucket.org/site/oauth2/authorize
    token_url: https://bitbucket.org/site/oauth2/access_token
    proxy:
        base_url: https://api.bitbucket.org
    docs: https://docs.nango.dev/integrations/all/bitbucket

bitdefender:
    display_name: Bitdefender
    categories:
        - other
    auth_mode: BASIC
    proxy:
        base_url: ${connectionConfig.ACCESS_URL}
        retry:
            after: 'retry-after'
    credentials_verification_script: bitdefenderCredentialsVerification
    docs: https://docs.nango.dev/integrations/all/bitdefender
    docs_connect: https://docs.nango.dev/integrations/all/bitdefender/connect
    credentials:
        username:
            type: string
            title: API Key
            description: The API Key of your Bitdefender account
            doc_section: '#step-1-finding-your-api-key'
        password:
            type: string
            title: ''
            description: ''
            default_value: ''
            hidden: true
    connection_config:
        ACCESS_URL:
            type: string
            title: Access URL
            description: The access URL of your Bitdefender account
            example: https://api.bitdefender.com
            format: uri
            pattern: '^https://.*'
            doc_section: '#step-1-finding-your-api-key'

bitly:
    display_name: Bitly
    categories:
        - marketing
        - social
    auth_mode: OAUTH2
    authorization_url: https://bitly.com/oauth/authorize
    token_url: https://api-ssl.bitly.com/oauth/access_token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    proxy:
        base_url: https://api-ssl.bitly.com
    docs: https://docs.nango.dev/integrations/all/bitly

blackbaud:
    display_name: Blackbaud
    categories:
        - crm
    auth_mode: OAUTH2
    authorization_url: https://app.blackbaud.com/oauth/authorize
    token_url: https://oauth2.sky.blackbaud.com/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.sky.blackbaud.com
    docs: https://docs.nango.dev/integrations/all/blackbaud

blackbaud-basic:
    display_name: Blackbaud (Basic Auth)
    categories:
        - crm
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.hostName}
        headers:
            content-type: application/soap+xml; charset=utf-8
    docs: https://docs.nango.dev/integrations/all/blackbaud-basic
    docs_connect: https://docs.nango.dev/integrations/all/blackbaud-basic
    connection_config:
        hostName:
            type: string
            title: Host Name
            description: Your Blackbaud host name
            example: https://altrurig01bo3.blackbaudhosting.com
            pattern: '^https?:\/\/[a-z0-9.-]+(:\d+)?(\/.*)?$'
            order: 1
            doc_section: '#step-1-finding-your-host-name'
    credentials:
        username:
            type: string
            title: Username
            description: Your Username
            doc_section: '#step-3-finding-your-username'
        password:
            type: string
            title: Password
            description: Your Password
            doc_section: '#step-2-finding-your-password'

blandai:
    display_name: BlandAI
    categories:
        - support
    auth_mode: API_KEY
    proxy:
        base_url: https://api.bland.ai
        headers:
            authorization: ${apiKey}
        verification:
            method: GET
            endpoints:
                - v1/calls
    docs: https://docs.nango.dev/integrations/all/blandai
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your BlandAI account

boldsign:
    display_name: BoldSign
    categories:
        - legal
    auth_mode: OAUTH2
    authorization_url: https://account.boldsign.com/connect/authorize
    token_url: https://account.boldsign.com/connect/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.boldsign.com
    docs: https://docs.nango.dev/integrations/all/boldsign

box:
    display_name: Box
    categories:
        - knowledge-base
        - storage
    auth_mode: OAUTH2
    authorization_url: https://account.box.com/api/oauth2/authorize
    token_url: https://api.box.com/oauth2/token
    proxy:
        base_url: https://api.box.com
    docs: https://docs.nango.dev/integrations/all/box

booking-com:
    display_name: Booking.com
    categories:
        - e-commerce
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.environmentType}-xml.booking.com
    docs: https://docs.nango.dev/integrations/all/booking-com
    connection_config:
        environmentType:
            type: string
            title: Environment Type
            description: The environment type for your various requests
            pattern: '^(secure-supply|supply)$'
            example: secure-supply|supply
            suffix: -xml.booking.com
            prefix: https://
    credentials:
        username:
            type: string
            title: Machine Account Username
            description: The username for your Booking.com machine account
        password:
            type: string
            title: Machine Account Password
            description: The password for your Booking.com machine account

braintree:
    display_name: Braintree
    categories:
        - payment
    auth_mode: OAUTH2
    authorization_url: https://api.braintreegateway.com/oauth/connect
    token_url: https://api.braintreegateway.com/oauth/access_tokens
    scope_separator: ','
    authorization_method: header
    body_format: json
    token_params:
        grant_type: authorization_code
    redirect_uri_metadata:
        - merchantId
    proxy:
        base_url: https://api.braintreegateway.com
    docs: https://docs.nango.dev/integrations/all/braintree

braintree-sandbox:
    display_name: Braintree (Sandbox)
    auth_mode: OAUTH2
    authorization_url: https://api.sandbox.braintreegateway.com/oauth/connect
    token_url: https://api.sandbox.braintreegateway.com/oauth/access_tokens
    scope_separator: ','
    authorization_method: header
    body_format: json
    token_params:
        grant_type: authorization_code
    redirect_uri_metadata:
        - merchantId
    proxy:
        base_url: https://api.sandbox.braintreegateway.com
    docs: https://docs.nango.dev/integrations/all/braintree-sandbox

braze:
    display_name: Braze
    categories:
        - communication
    auth_mode: API_KEY
    proxy:
        base_url: https://rest.${connectionConfig.instanceUrl}
        headers:
            authorization: Bearer ${apiKey}
        retry:
            at: 'x-ratelimit-reset'
    docs: https://docs.nango.dev/integrations/all/braze
    docs_connect: https://docs.nango.dev/integrations/all/braze/connect
    connection_config:
        instanceUrl:
            type: string
            title: Instance URL
            description: The REST API URL of your Braze instance
            example: iad-02.braze.com
            format: hostname
            prefix: https://rest.
            order: 1
            doc_section: '#step-1-finding-your-instance-url'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key to your Braze account
            doc_section: '#step-2-finding-your-api-key'

brevo-api-key:
    display_name: Brevo
    categories:
        - marketing
    auth_mode: API_KEY
    proxy:
        headers:
            api-key: ${apiKey}
        base_url: https://api.brevo.com/v3
        verification:
            method: GET
            endpoints:
                - /account
    docs: https://docs.nango.dev/integrations/all/brevo-api-key
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Brevo account

brex:
    display_name: Brex (OAuth)
    categories:
        - banking
    auth_mode: OAUTH2
    authorization_url: https://accounts-api.brex.com/oauth2/default/v1/authorize
    token_url: https://accounts-api.brex.com/oauth2/default/v1/token
    default_scopes:
        - openid
        - offline_access
    proxy:
        base_url: https://platform.brexapis.com
    docs: https://docs.nango.dev/integrations/all/brex

brex-api-key:
    display_name: Brex (API Key)
    auth_mode: API_KEY
    proxy:
        headers:
            authorization: Bearer ${apiKey}
        base_url: https://platform.brexapis.com
    docs: https://docs.nango.dev/integrations/all/brex-api-key
    docs_connect: https://docs.nango.dev/integrations/all/brex-api-key/connect
    credentials:
        apiKey:
            type: string
            title: API Token
            description: The API Token to your Brex account
            example: bxt_vRUwQT3snBmA1IDVq5iK1kXc4N0bhxr377z4
            pattern: '^bxt_[a-zA-Z0-9]+$'
            doc_section: '#step-1-finding-your-api-token'

brex-staging:
    display_name: Brex (Staging OAuth)
    auth_mode: OAUTH2
    authorization_url: https://accounts-api.staging.brexapps.com/oauth2/default/v1/authorize
    token_url: https://accounts-api.staging.brexapps.com/oauth2/default/v1/token
    proxy:
        base_url: https://platform.staging.brexapis.com
    docs: https://docs.nango.dev/integrations/all/brex-staging

brightcrowd:
    display_name: BrightCrowd
    categories:
        - social
    auth_mode: OAUTH2_CC
    token_url: https://bcb-staging.auth.us-east-1.amazoncognito.com/oauth2/token
    token_request_auth_method: basic
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api.brightcrowd.com/partner
        paginate:
            type: cursor
            cursor_path_in_response: nextPageToken
            cursor_name_in_request: pageToken
    docs: https://docs.nango.dev/integrations/all/brightcrowd
    docs_connect: https://docs.nango.dev/integrations/all/brightcrowd/connect

builder-io-private:
    display_name: Builder.io (Private)
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.domain}
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: POST
            endpoints:
                - /api/v1/write/page
    docs: https://docs.nango.dev/integrations/all/builder-io-private
    docs_connect: https://docs.nango.dev/integrations/all/builder-io-private/connect
    connection_config:
        domain:
            type: string
            title: Domain
            description: The domain used to access your Builder.io API
            example: cdn.builder.io
            format: hostname
            prefix: https://
            doc_section: '#step-1-finding-your-api-domain'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Builder.io account
            pattern: '^[a-zA-Z0-9]+$'
            example: bb209fb71eh2412dbe0114bdae18fd15
            doc_section: '#step-2-finding-your-api-key'

builder-io-public:
    display_name: Builder.io (Public)
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.domain}
        query:
            apiKey: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /api/v1/content/page
    docs: https://docs.nango.dev/integrations/all/builder-io-public
    docs_connect: https://docs.nango.dev/integrations/all/builder-io-public/connect
    connection_config:
        domain:
            type: string
            title: Domain
            description: The domain used to access your Builder.io API
            example: builder.io
            format: hostname
            prefix: https://
            doc_section: '#step-1-finding-your-api-domain'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Builder.io account
            pattern: '^[a-zA-Z0-9]+$'
            example: bb209fb71eh2412dbe0114bdae18fd15
            doc_section: '#step-2-finding-your-api-key'

buildium:
    display_name: Buildium
    categories:
        - accounting
        - crm
        - payment
    auth_mode: API_KEY
    proxy:
        base_url: https://api.buildium.com
        headers:
            x-buildium-client-id: ${connectionConfig.clientId}
            x-buildium-client-secret: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/rentals
    docs: https://docs.nango.dev/integrations/all/buildium
    docs_connect: https://docs.nango.dev/integrations/all/buildium/connect
    connection_config:
        clientId:
            type: string
            title: Client ID
            description: Your API Key Client ID
            pattern: '^[a-f0-9-]+$'
            example: a228f0e7-b4a3-4150-b9ae-8552fc2880d3
            doc_section: '#step-2-finding-your-client-id-and-secret'
            order: 1
    credentials:
        apiKey:
            type: string
            title: Secret
            description: The Secret for your Buildium account
            pattern: '^[A-Za-z0-9+/]+$'
            example: uOq2p+xlgpFdijfV/HqY+EvYpZKHRwlyhGuAVbJIxXs
            doc_section: '#step-2-finding-your-client-id-and-secret'

builtwith:
    display_name: BuiltWith
    categories:
        - dev-tools
        - analytics
        - crm
        - marketing
        - e-commerce
    auth_mode: API_KEY
    proxy:
        base_url: https://api.builtwith.com
        query:
            KEY: ${apiKey}
    docs: https://docs.nango.dev/integrations/all/builtwith
    docs_connect: https://docs.nango.dev/integrations/all/builtwith/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your BuiltWith account
            example: 1bc32cba-a5d6-438a-bbcc-af312f560a3c
            format: uuid
            doc_section: '#step-1-finding-your-api-key'

cal-com-v1:
    display_name: Cal.com (v1)
    categories:
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://api.cal.com/v1
        query:
            apiKey: ${apiKey}
        retry:
            at: 'x-ratelimit-reset'
        verification:
            method: GET
            endpoints:
                - /me
    docs: https://docs.nango.dev/integrations/all/cal-com-v1
    docs_connect: https://docs.nango.dev/integrations/all/cal-com-v1/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Cal.com account
            pattern: '^cal_[a-zA-Z0-9_]+$'
            example: cal_xxxxxx
            doc_section: '#step-1-finding-your-api-key'
cal-com-v2:
    display_name: Cal.com (v2)
    categories:
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://api.cal.com/v2
        headers:
            authorization: Bearer ${apiKey}
        paginate:
            type: cursor
            cursor_name_in_request: cursor
            cursor_path_in_response: data.data.nextCursor
            limit_name_in_request: limit
        retry:
            at: 'x-ratelimit-reset'
        verification:
            method: GET
            endpoints:
                - /me
    docs: https://docs.nango.dev/integrations/all/cal-com-v2
    docs_connect: https://docs.nango.dev/integrations/all/cal-com-v2/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Cal.com account
            pattern: '^cal_[a-zA-Z0-9_]+$'
            example: cal_xxxxxx
            doc_section: '#step-1-finding-your-api-key'

calendly:
    display_name: Calendly
    categories:
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://auth.calendly.com/oauth/authorize
    token_url: https://auth.calendly.com/oauth/token
    authorization_params:
        response_type: code
    proxy:
        base_url: https://api.calendly.com
        paginate:
            type: link
            link_path_in_response_body: pagination.next_page
        retry:
            at: 'x-ratelimit-reset'
    token_response_metadata:
        - owner
    post_connection_script: calendlyPostConnection
    webhook_routing_script: calendlyWebhookRouting
    docs: https://docs.nango.dev/integrations/all/calendly

callrail:
    display_name: Callrail
    categories:
        - marketing
    auth_mode: API_KEY
    proxy:
        base_url: https://api.callrail.com
        headers:
            authorization: Token token=${apiKey}
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /v3/a.json
    docs_connect: https://docs.nango.dev/integrations/all/callrail/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Callrail account
            pattern: '^[a-f0-9]{32}$'
            example: '4f3c12efb9659a0b5c123b568745dbf9'
            doc_section: '#step-1-finding-your-api-key'
    docs: https://docs.nango.dev/integrations/all/callrail

canny:
    display_name: Canny
    categories:
        - support
    auth_mode: API_KEY
    proxy:
        base_url: https://canny.io/api/v1
        query:
            apiKey: ${apiKey}
        verification:
            method: POST
            endpoints:
                - /boards/list
    docs: https://docs.nango.dev/integrations/all/canny
    docs_connect: https://docs.nango.dev/integrations/all/canny/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Canny account
            example: a1f5937c-82df-bd29-4e3a-7b6fda8c54d1
            pattern: '^[a-zA-Z0-9-]+$'
            doc_section: '#step-1-finding-your-api-key'
canva-scim:
    display_name: Canva (SCIM API)
    categories:
        - design
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://www.canva.com/_scim
        headers:
            authorization: Bearer ${apiKey}
            accept: application/json
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /v2/Users
    docs: https://docs.nango.dev/integrations/all/canva-scim
    docs_connect: https://docs.nango.dev/integrations/all/canva-scim/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Canva scim account
            doc_section: '#step-1-finding-canva-api-key'

certn:
    display_name: Certn
    categories:
        - legal
    auth_mode: API_KEY
    proxy:
        base_url: https://api.certn.co
        headers:
            authorization: Bearer ${apiKey}
        paginate:
            type: link
            link_path_in_response_body: next
            response_path: results
        verification:
            method: GET
            endpoints:
                - /api/v2/teams
    docs: https://docs.nango.dev/integrations/all/certn
    docs_connect: https://docs.nango.dev/integrations/all/certn
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Certn account
            doc_section: '#step-1-creating-an-api-key'

certn-partner:
    display_name: Certn Partner
    categories:
        - legal
    auth_mode: OAUTH2_CC
    proxy:
        headers:
            authorization: Bearer ${apiKey}
        base_url: https://api.certn.co
        paginate:
            type: offset
            offset_name_in_request: page
            response_path: data
            limit_name_in_request: limit
        verification:
            method: GET
            endpoints:
                - /api/v2/teams
    docs: https://docs.nango.dev/integrations/all/certn-partner

chargebee:
    display_name: Chargebee
    categories:
        - payment
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.chargebee.com
        verification:
            method: GET
            endpoints:
                - /api/v2/business_entities
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/chargebee
    docs_connect: https://docs.nango.dev/integrations/all/chargebee/connect
    connection_config:
        subdomain:
            type: string
            title: Chargebee Domain
            description: The subdomain of your Chargebee account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .chargebee.com
            prefix: https://
            doc_section: '#step-1-creating-an-api-key'
    credentials:
        username:
            type: string
            title: API Key
            description: The API key for your Chargebee account
            pattern: '^[a-zA-Z0-9_-]+$'
            secret: true
        password:
            type: string
            title: Password
            description: Password
            # https://apidocs.chargebee.com/docs/api/auth?lang=curl
            # Chargebee is using basic auth with an api key
            default_value: ''
            hidden: true

chattermill:
    display_name: Chattermill
    categories:
        - support
        - analytics
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.subdomain}.chattermill.com
        headers:
            authorization: Bearer ${apiKey}
            accept: application/json
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /v1/projects
    docs: https://docs.nango.dev/integrations/all/chattermill
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Chattermill account
    connection_config:
        subdomain:
            type: string
            title: Chattermill subdomain
            description: The subdomain for your api requests
            pattern: '^(app|api|backend)$'
            example: 'app|api|backend'
            suffix: .chattermill.com
            prefix: https://

checkhq:
    display_name: Check
    categories:
        - accounting
    auth_mode: API_KEY
    proxy:
        base_url: https://api.checkhq.com
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/checkhq
    docs_connect: https://docs.nango.dev/integrations/all/checkhq/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your CheckHQ account
            doc_section: '#step-1-finding-check-api-token'

checkr-partner:
    display_name: Checkr Partner
    categories:
        - legal
    auth_mode: OAUTH2
    authorization_url: https://partners.checkr.com/authorize/${connectionConfig.client_id}
    token_url: https://api.checkr.com/oauth/tokens
    disable_pkce: true
    token_params:
        grant_type: authorization_code
    proxy:
        retry:
            at: 'x-ratelimit-reset'
        base_url: https://api.checkr.com
    token_response_metadata:
        - checkr_account_id
    webhook_routing_script: checkrPartnerWebhookRouting
    post_connection_script: checkrPartnerPostConnection
    docs: https://docs.nango.dev/integrations/all/checkr-partner
    connection_config:
        client_id:
            type: string
            title: Client ID
            description: The client ID of your Checkr Partner account

checkr-partner-staging:
    display_name: Checkr Partner (Staging)
    categories:
        - legal
    auth_mode: OAUTH2
    authorization_url: https://partners.checkrhq-staging.net/authorize/${connectionConfig.client_id}
    token_url: https://api.checkr-staging.com/oauth/tokens
    disable_pkce: true
    token_params:
        grant_type: authorization_code
    proxy:
        retry:
            at: 'x-ratelimit-reset'
        base_url: https://api.checkr-staging.com
    token_response_metadata:
        - checkr_account_id
    webhook_routing_script: checkrPartnerWebhookRouting
    post_connection_script: checkrPartnerPostConnection
    docs: https://docs.nango.dev/integrations/all/checkr-partner-staging
    connection_config:
        client_id:
            type: string
            title: Client ID
            description: The client ID of your Checkr Partner account

checkout-com:
    display_name: Checkout.com
    categories:
        - payment
    auth_mode: OAUTH2_CC
    token_url: https://access.checkout.com/connect/token
    token_request_auth_method: basic
    token_params:
        grant_type: client_credentials
    proxy:
        headers:
            content-type: application/json
            accept: application/json
        base_url: https://api.checkout.com
    docs: https://docs.nango.dev/integrations/all/checkout-com
    docs_connect: https://docs.nango.dev/integrations/all/checkout-com/connect

checkout-com-sandbox:
    display_name: Checkout.com (Sandbox)
    categories:
        - payment
    auth_mode: OAUTH2_CC
    token_url: https://access.sandbox.checkout.com/connect/token
    token_request_auth_method: basic
    token_params:
        grant_type: client_credentials
    proxy:
        headers:
            content-type: application/json
            accept: application/json
        base_url: https://api.sandbox.checkout.com
    docs: https://docs.nango.dev/integrations/all/checkout-com-sandbox
    docs_connect: https://docs.nango.dev/integrations/all/checkout-com-sandbox/connect

chorus:
    display_name: Chorus
    auth_mode: API_KEY
    proxy:
        base_url: https://chorus.ai
        verification:
            method: GET
            endpoints:
                - /api/v1/users/me
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/chorus
    docs_connect: https://docs.nango.dev/integrations/all/chorus/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Chorus account
            doc_section: '#step-1-generating-your-chorus-api-key'

circle-so:
    display_name: Circle.so
    categories:
        - communication
    auth_mode: API_KEY
    proxy:
        base_url: https://app.circle.so
        headers:
            authorization: Token ${apiKey}
    docs: https://docs.nango.dev/integrations/all/circle-so
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Circle.so account

clari-copilot:
    display_name: Clari Copilot
    categories:
        - marketing
    auth_mode: API_KEY
    proxy:
        headers:
            x-api-key: ${apiKey}
            x-api-password: ${connectionConfig.API_PASSWORD}
        base_url: https://rest-api.copilot.clari.com
        verification:
            method: GET
            endpoints:
                - /calls
    docs: https://docs.nango.dev/integrations/all/clari-copilot
    connection_config:
        API_PASSWORD:
            type: string
            title: API Password
            description: The API password of your Clari Copilot account
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Clari Copilot account

clicksend:
    display_name: ClickSend
    categories:
        - communication
    auth_mode: BASIC
    proxy:
        base_url: https://rest.clicksend.com
        verification:
            method: GET
            endpoints:
                - /v3/account
    docs: https://docs.nango.dev/integrations/all/clicksend
    docs_connect: https://docs.nango.dev/integrations/all/clicksend/connect
    credentials:
        username:
            type: string
            title: Username
            description: Your ClickSend account username
            doc_section: '#step-1-finding-your-username-and-api-key'
        password:
            type: string
            title: API Key
            description: Your ClickSend API Key
            secret: true
            doc_section: '#step-1-finding-your-username-and-api-key'

clickup:
    display_name: ClickUp
    categories:
        - productivity
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://app.clickup.com/api
    token_url: https://api.clickup.com/api/v2/oauth/token
    proxy:
        base_url: https://api.clickup.com
    docs: https://docs.nango.dev/integrations/all/clickup

cloudentity:
    display_name: Cloudentity
    auth_mode: OAUTH2_CC
    categories:
        - other
    token_url: https://${connectionConfig.tenantID}.${connectionConfig.regionID}.authz.cloudentity.io/${connectionConfig.tenantID}/${connectionConfig.workspaceID}/oauth2/token
    scope_separator: ' '
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://${connectionConfig.tenantID}.${connectionConfig.regionID}.authz.cloudentity.io/${connectionConfig.tenantID}/${connectionConfig.workspaceID}
    docs: https://docs.nango.dev/integrations/all/cloudentity
    docs_connect: https://docs.nango.dev/integrations/all/cloudentity/connect
    connection_config:
        tenantID:
            type: string
            title: Tenant ID
            description: The tenant ID of your Cloudentity account
            doc_section: '#step-2-retrieving-the-tenant-id'
        regionID:
            type: string
            title: Region ID
            description: The region ID of your Cloudentity account
            doc_section: '#step-3-retrieving-the-region-id'
        workspaceID:
            type: string
            title: Workspace ID
            description: The workspace ID of your Cloudentity account
            doc_section: '#step-4-retrieving-the-workspace-id'

close:
    display_name: Close
    categories:
        - crm
    auth_mode: OAUTH2
    authorization_url: https://app.close.com/oauth2/authorize
    token_url: https://api.close.com/oauth2/token/
    authorization_params:
        response_type: code
    default_scopes:
        - offline_access
    proxy:
        base_url: https://api.close.com/api
    docs: https://docs.nango.dev/integrations/all/close

coda:
    display_name: Coda
    categories:
        - knowledge-base
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://coda.io/apis/v1
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /whoami
    docs: https://docs.nango.dev/integrations/all/coda
    docs_connect: https://docs.nango.dev/integrations/all/coda/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Coda account
            doc_section: '#step-1-creating-an-api-key'

codeclimate:
    display_name: Code Climate
    categories:
        - dev-tools
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.domain}
        headers:
            accept: application/vnd.api+json
            authorization: Token token=${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/user
    docs: https://docs.nango.dev/integrations/all/codeclimate
    docs_connect: https://docs.nango.dev/integrations/all/codeclimate/connect
    connection_config:
        domain:
            type: string
            title: Domain
            description: The domain of your Code Climate account
            format: hostname
            prefix: https://
            doc_section: '#step-1-obtaining-the-domain-url'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Code Climate account
            doc_section: '#step-2-creating-an-api-key'

codegen:
    display_name: Codegen
    categories:
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.codegen.com
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/organizations
    docs: https://docs.nango.dev/integrations/all/codegen
    docs_connect: https://docs.nango.dev/integrations/all/codegen/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API Key for your Codegen account
            pattern: '^sk-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
            example: 'sk-897bd628-de64-4018-8e3b-c6f717ca3e1d'
            doc_section: '#step-1-finding-your-api-key'

commercetools:
    display_name: Commercetools
    categories:
        - e-commerce
    auth_mode: OAUTH2_CC
    token_url: https://auth.${connectionConfig.region}.${connectionConfig.cloudProvider}.commercetools.com/oauth/token
    token_request_auth_method: basic
    scope_separator: ' '
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api.${connectionConfig.region}.${connectionConfig.cloudProvider}.commercetools.com/${connectionConfig.projectKey}
        headers:
            authorization: Bearer ${accessToken}
    docs: https://docs.nango.dev/integrations/all/commercetools
    docs_connect: https://docs.nango.dev/integrations/all/commercetools/connect
    connection_config:
        region:
            type: string
            title: Region
            description: The region of your Commercetools account. Use the full region identifier (e.g., 'us-central1' for GCP or 'us-east-2' for AWS).
            example: us-central1
            pattern: '^[a-z]+-[a-z0-9-]+$'
            doc_section: '#step-3-identify-your-region-and-cloud-provider'
        projectKey:
            type: string
            title: Project Key
            description: The project key of your Commercetools account
            example: demo-project-slug
            pattern: '^[a-zA-Z0-9-_]+$'
            doc_section: '#step-2-save-the-api-environment-variables'
        cloudProvider:
            type: string
            title: Cloud Provider
            description: Cloud provider used to host your Commercetools project (e.g., 'gcp' or 'aws')
            example: gcp
            pattern: '^(gcp|aws)$'
            doc_section: '#step-3-identify-your-region-and-cloud-provider'

companycam:
    display_name: CompanyCam
    categories:
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://api.companycam.com
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v2/company
    docs: https://docs.nango.dev/integrations/all/companycam
    credentials:
        apiKey:
            type: string
            title: Access Token
            description: The Access Token for your CompanyCam company

copper:
    display_name: Copper (OAuth)
    categories:
        - crm
    auth_mode: OAUTH2
    proxy:
        base_url: https://api.copper.com/developer_api
    default_scopes:
        - developer/v1/all
    authorization_url: https://app.copper.com/oauth/authorize
    token_url: https://app.copper.com/oauth/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    docs: https://docs.nango.dev/integrations/all/copper

copper-api-key:
    display_name: Copper (API Key)
    categories:
        - crm
    auth_mode: API_KEY
    proxy:
        base_url: https://api.copper.com/developer_api
        headers:
            x-pw-accesstoken: ${apiKey}
            x-pw-application: developer_api
            x-pw-useremail: ${connectionConfig.userEmail}
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /v1/account
    docs_connect: https://docs.nango.dev/integrations/all/copper/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Copper account
            pattern: '^[a-f0-9]{32}$'
            example: '4f3c12efb9659a0b5c123b568745dbf9'
            doc_section: '#step-1-finding-copper-api-key'
    connection_config:
        userEmail:
            type: string
            title: User Email
            description: Email address of the user who generated the token
    docs: https://docs.nango.dev/integrations/all/copper-api-key

connectwise-psa:
    display_name: ConnectWise PSA
    categories:
        - support
        - ticketing
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.myconnectwise.net/v4_6_release/apis/3.0
        headers:
            accept: application/vnd.connectwise.com+json; version=${connectionConfig.apiVersion}
            clientid: ${connectionConfig.clientId}
    docs: https://docs.nango.dev/integrations/all/connectwise-psa
    connection_config:
        subdomain:
            type: string
            title: ConnectWise PSA subdomain
            description: The subdomain to connect to ConnectWise PSA
            pattern: '^api-(au|eu|na)$'
            example: api-au
            suffix: .myconnectwise.net
            prefix: https://
        apiVersion:
            type: string
            title: Api version
            description: The API version to connect to ConnectWise PSA
        clientId:
            type: string
            title: Client ID
            description: The Client ID assigned to your integration
    credentials:
        username:
            type: string
            title: Username
            description: The ConnectWise PSA CompanyId followed by either the Public Key, Integrator Username, or MemberId
        password:
            type: string
            title: Password
            description: Your ConnectWise PSA private key, integrator password, or member hash

connectwise-psa-staging:
    display_name: ConnectWise PSA (Staging)
    categories:
        - support
        - ticketing
    auth_mode: BASIC
    proxy:
        base_url: https://api-staging.connectwisedev.com/v4_6_release/apis/3.0
        headers:
            accept: application/vnd.connectwise.com+json; version=${connectionConfig.apiVersion}
            clientid: ${connectionConfig.clientId}
    docs: https://docs.nango.dev/integrations/all/connectwise-psa-staging
    connection_config:
        apiVersion:
            type: string
            title: Api version
            description: The API version to connect to ConnectWise PSA
        clientId:
            type: string
            title: Client ID
            description: The Client ID assigned to your integration

confluence:
    display_name: Confluence
    categories:
        - knowledge-base
        - popular
    alias: jira
    docs: https://docs.nango.dev/integrations/all/confluence

confluence-basic:
    display_name: Confluence (Basic Auth)
    categories:
        - knowledge-base
        - popular
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.atlassian.net
        headers:
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /wiki/api/v2/spaces
    docs: https://docs.nango.dev/integrations/all/confluence-basic
    docs_connect: https://docs.nango.dev/integrations/all/confluence-basic/connect
    connection_config:
        subdomain:
            type: string
            title: Confluence Subdomain
            description: The subdomain of your Confluence account
            pattern: '^[a-z0-9_-]+$'
            example: subdomain
            suffix: .atlassian.net
            prefix: https://
            order: 1
            doc_section: '#step-2-finding-your-atlassian-domain'
    credentials:
        username:
            type: string
            title: Email Address
            format: email
            description: The email address for your Confluence account
            doc_section: '#step-1-getting-your-api-token'
        password:
            type: string
            title: API token
            description: The API token for your Confluence account
            secret: true
            doc_section: '#step-1-getting-your-api-token'

contentful:
    display_name: Contentful
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: OAUTH2
    authorization_url: https://be.contentful.com/oauth/authorize
    token_url: https://be.contentful.com/oauth/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://${connectionConfig.subdomain}.contentful.com
        retry:
            after: x-contentful-ratelimit-reset
    docs: https://docs.nango.dev/integrations/all/contentful
    connection_config:
        subdomain:
            type: string
            title: Contentful Domain
            description: The subdomain of your Contentful account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .contentful.com
            prefix: https://

contentstack:
    display_name: Contentstack
    categories:
        - cms
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.contentstack.com/apps/${connectionConfig.appId}/authorize
    token_url: https://${connectionConfig.subdomain}.contentstack.com/apps-api/apps/token
    docs: https://docs.nango.dev/integrations/all/contentstack
    proxy:
        base_url: https://${connectionConfig.apiDomain}
    connection_config:
        subdomain:
            type: string
            title: Contentstack Domain
            description: The subdomain of your Contentstack account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .contentstack.com
            prefix: https://
            order: 2
        appId:
            type: string
            title: App ID
            description: The app ID of your Contentstack account
            order: 1
        apiDomain:
            type: string
            title: API Domain
            description: The domain to where you will access your API
            pattern: '^[a-z0-9_-]+$'
            example: eu-api.contentstack.com
            prefix: https://
            order: 3

coros:
    display_name: Coros
    categories:
        - sports
    auth_mode: OAUTH2
    authorization_url: https://open.coros.com/oauth2/authorize
    token_url: https://open.coros.com/oauth2/accesstoken
    refresh_url: https://open.coros.com/oauth2/refresh-token
    authorization_params:
        response_type: code
    token_response_metadata:
        - openId
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://open.coros.com
    docs: https://docs.nango.dev/integrations/all/coros

coros-sandbox:
    display_name: Coros (Sandbox)
    auth_mode: OAUTH2
    authorization_url: https://opentest.coros.com/oauth2/authorize
    token_url: https://opentest.coros.com/oauth2/accesstoken
    refresh_url: https://opentest.coros.com/oauth2/refresh-token
    authorization_params:
        response_type: code
    token_response_metadata:
        - openId
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://opentest.coros.com
    docs: https://docs.nango.dev/integrations/all/coros-sandbox

coupa-compass:
    display_name: Coupa Compass
    categories:
        - payment
        - invoicing
    auth_mode: OAUTH2_CC
    scope_separator: ' '
    token_url: https://${connectionConfig.instanceDomain}/oauth2/token
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://${connectionConfig.instanceDomain}
    docs: https://docs.nango.dev/integrations/all/coupa-compass
    connection_config:
        instanceDomain:
            type: string
            title: Instance Domain
            description: The domain of your Coupa Compass account
            format: hostname
            prefix: https://

cyberimpact:
    display_name: Cyberimpact
    categories:
        - marketing
    auth_mode: API_KEY
    proxy:
        base_url: https://api.cyberimpact.com
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /ping
    docs: https://docs.nango.dev/integrations/all/cyberimpact
    docs_connect: https://docs.nango.dev/integrations/all/cyberimpact/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Cyberimpact account
            pattern: '^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$'
            example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...'
            doc_section: '#step-1-creating-a-cyberimpact-api-key'

databricks-account:
    display_name: Databricks (Account Level)
    categories:
        - analytics
    auth_mode: OAUTH2_CC
    token_url: https://accounts.cloud.databricks.com/oidc/accounts/${connectionConfig.accountId}/v1/token
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://accounts.cloud.databricks.com/api/2.0/accounts/${connectionConfig.accountId}
    docs: https://docs.nango.dev/integrations/all/databricks-account
    connection_config:
        accountId:
            type: string
            title: Account ID
            description: The ID to your account
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000

databricks-workspace:
    display_name: Databricks (Workspace Level)
    categories:
        - analytics
    auth_mode: OAUTH2_CC
    token_url: https://${connectionConfig.databricksInstance}/oidc/v1/token
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://${connectionConfig.databricksInstance}/api/2.0/
    docs: https://docs.nango.dev/integrations/all/databricks-workspace
    connection_config:
        databricksInstance:
            type: string
            title: Databricks Instance
            description: The instance to your databricks deployment
            pattern: '^[a-z0-9_-]+(\.[a-z0-9_-]+)*$'
            example: dbc-a1b2345c-d6e7.cloud.databricks.com

# Untested configuration. Please reach out if you have a test account that we can use to test it.
datev:
    display_name: Datev
    categories:
        - legal
        - hr
    auth_mode: OAUTH2
    authorization_url: https://login.datev.de/openid/authorize
    token_url: https://api.datev.de/token
    token_request_auth_method: basic
    scope_separator: ' '
    default_scopes:
        - openid
    authorization_params:
        response_type: code id_token
        response_mode: query
        nonce: AnotherRandomStringDatev
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.datev.de
    docs: https://docs.nango.dev/integrations/all/datev

datadog:
    display_name: Datadog
    categories:
        - analytics
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.${connectionConfig.siteParameter}/api
        headers:
            dd-api-key: ${apiKey}
            dd-application-key: ${connectionConfig.applicationKey}
        verification:
            method: GET
            endpoints:
                - /v1/validate
        retry:
            after: 'x-ratelimit-reset'
    docs: https://docs.nango.dev/integrations/all/datadog
    docs_connect: https://docs.nango.dev/integrations/all/datadog/connect
    connection_config:
        siteParameter:
            type: string
            title: Site Parameter
            description: The site parameter to datadog
            pattern: '^(us[35]\.)?(ap1\.)?(datadoghq\.(com|eu)|ddog-gov\.com)$'
            example: 'us5.datadoghq.com'
            doc_section: '#step-1-finding-your-datadog-domain'
        applicationKey:
            type: string
            title: Application Key
            description: The application key required for read data access
            pattern: '^[a-f0-9]{40}$'
            example: '5d8a7b3f2dc8bce1b234e7f1a1ac54728dbf9e4a7'
            doc_section: '#step-3-datadog-application-key'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Datadog account
            pattern: '^[a-f0-9]{32}$'
            example: '4f3c12efb9659a0b5c123b568745dbf9'
            doc_section: '#step-2-datadog-api-key'

deel:
    display_name: Deel
    categories:
        - hr
    auth_mode: OAUTH2
    authorization_url: https://app.deel.com/oauth2/authorize
    token_url: https://app.deel.com/oauth2/tokens
    token_request_auth_method: basic
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.letsdeel.com
    docs: https://docs.nango.dev/integrations/all/deel

deel-sandbox:
    display_name: Deel (Sandbox)
    auth_mode: OAUTH2
    authorization_url: https://demo.deel.com/oauth2/authorize
    token_url: https://demo.deel.com/oauth2/tokens
    token_request_auth_method: basic
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api-sandbox.demo.deel.com
    docs: https://docs.nango.dev/integrations/all/deel-sandbox

devin:
    display_name: Devin
    categories:
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.devin.ai
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/sessions
    docs: https://docs.nango.dev/integrations/all/devin
    docs_connect: https://docs.nango.dev/integrations/all/devin/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API Key for your Devin account
            pattern: '^apk_user_[A-Za-z0-9+/=]+$'
            example: 'apk_user_dGVzdF9vcmdfeDY1NzRBUElLRVl8Njc1OTdjNDQzMjFhOTZlODhlMmE4MTI0X29yZ194NnB5QlVJa042anVKWWtMOjQ3NzQxYTVmYWE5MTRiNjQ5'
            doc_section: '#step-1-finding-your-api-key'

dialpad:
    display_name: Dialpad
    categories:
        - communication
    auth_mode: OAUTH2
    authorization_url: https://dialpad.com/oauth2/authorize
    token_url: https://dialpad.com/oauth2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://dialpad.com
    docs: https://docs.nango.dev/integrations/all/dialpad

dialpad-sandbox:
    display_name: Dialpad (Sandbox)
    categories:
        - communication
    auth_mode: OAUTH2
    authorization_url: https://sandbox.dialpad.com/oauth2/authorize
    token_url: https://sandbox.dialpad.com/oauth2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://sandbox.dialpad.com
    docs: https://docs.nango.dev/integrations/all/dialpad-sandbox

digitalocean:
    display_name: DigitalOcean
    categories:
        - dev-tools
    auth_mode: OAUTH2
    authorization_url: https://cloud.digitalocean.com/v1/oauth/authorize
    token_url: https://cloud.digitalocean.com/v1/oauth/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.digitalocean.com
    docs: https://docs.nango.dev/integrations/all/digitalocean

discord:
    display_name: Discord
    categories:
        - gaming
        - social
    auth_mode: OAUTH2
    authorization_url: https://discord.com/api/oauth2/authorize
    token_url: https://discord.com/api/oauth2/token
    authorization_params:
        response_type: code
    proxy:
        base_url: https://discord.com
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/discord

discourse:
    display_name: Discourse
    categories:
        - communication
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.defaultHost}
        retry:
            after: 'retry-after'
        headers:
            api-username: ${connectionConfig.apiUsername}
            api-key: ${apiKey}
            accept: application/json
    docs: https://docs.nango.dev/integrations/all/discourse
    connection_config:
        defaultHost:
            type: string
            title: Domain
            description: The domain of your Discourse account
            format: hostname
            prefix: https://
        apiUsername:
            type: string
            title: API Username
            description: The API username of your Discourse account
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Discourse account

dixa:
    display_name: Dixa
    categories:
        - support
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.apiType}.dixa.io
        headers:
            authorization: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/agents
            base_url_override: https://dev.dixa.io
    docs: https://docs.nango.dev/integrations/all/dixa
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Dixa account
    connection_config:
        apiType:
            type: string
            title: Api Type
            description: The Api type for your requests
            pattern: '^dev\|exports$'
            example: 'dev|exports'

document360:
    display_name: Document360
    categories:
        - knowledge-base
    auth_mode: API_KEY
    proxy:
        headers:
            api_token: ${apiKey}
        base_url: https://api.document360.com
    docs: https://docs.nango.dev/integrations/all/document360
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Document360 account

docusign:
    display_name: DocuSign
    categories:
        - legal
    auth_mode: OAUTH2
    authorization_url: https://account.docusign.com/oauth/auth
    token_url: https://account.docusign.com/oauth/token
    token_request_auth_method: basic
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://www.docusign.net
    post_connection_script: docusignPostConnection
    docs: https://docs.nango.dev/integrations/all/docusign

docusign-sandbox:
    display_name: DocuSign (Sandbox)
    auth_mode: OAUTH2
    authorization_url: https://account-d.docusign.com/oauth/auth
    token_url: https://account-d.docusign.com/oauth/token
    token_request_auth_method: basic
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://demo.docusign.net
    post_connection_script: docusignPostConnection
    docs: https://docs.nango.dev/integrations/all/docusign-sandbox

docuware:
    display_name: DocuWare
    categories:
        - productivity
    auth_mode: TWO_STEP
    token_url: https://${connectionConfig.domain}/DocuWare/Platform/Home/IdentityServiceInfo
    body_format: form
    token_request_method: GET
    token_headers:
        content-type: application/x-www-form-urlencoded
    additional_steps:
        - body_format: form
          token_url: ${step1.IdentityServiceUrl}/.well-known/openid-configuration
          token_request_method: GET
        - body_format: form
          token_url: ${step2.token_endpoint}
          token_headers:
              content-type: application/x-www-form-urlencoded
          token_params:
              grant_type: password
              scope: docuware.platform
              client_id: docuware.platform.net.client
              username: ${credentials.username}
              password: ${credentials.password}
    proxy:
        base_url: https://${connectionConfig.domain}/DocuWare/Platform
    token_response:
        token: access_token
        token_expiration: expires_in
        token_expiration_strategy: expireIn
    docs: https://docs.nango.dev/integrations/all/docuware
    docs_connect: https://docs.nango.dev/integrations/all/docuware/connect
    connection_config:
        domain:
            type: string
            title: Domain
            description: The domain to your DocuWare account
            format: hostname
            prefix: https://
            example: example.docuware.cloud
            order: 1
            doc_section: '#step-1-finding-your-domain'
    credentials:
        username:
            type: string
            title: Username
            description: The Username to your DocuWare account
            doc_section: '#step-2-finding-your-credentials'
        password:
            type: string
            title: Password
            secret: true
            description: The Password to your DocuWare account
            doc_section: '#step-2-finding-your-credentials'

dropbox:
    display_name: Dropbox
    categories:
        - knowledge-base
        - storage
    auth_mode: OAUTH2
    authorization_url: https://www.dropbox.com/oauth2/authorize
    token_url: https://api.dropboxapi.com/oauth2/token
    authorization_params:
        token_access_type: offline
    proxy:
        base_url: https://api.dropboxapi.com
    docs: https://docs.nango.dev/integrations/all/dropbox

drupal:
    display_name: Drupal
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: TWO_STEP
    body_format: form
    token_url: https://${connectionConfig.baseUrl}/rest_api/access_token
    token_params:
        client_id: ${credentials.clientId}
        client_secret: ${credentials.clientSecret}
        username: ${credentials.userName}
        grant_type: client_credentials
    token_headers:
        content-type: application/x-www-form-urlencoded
        accept: application/json
    token_response:
        token: access_token
        token_expiration: expires_in
        token_expiration_strategy: expireIn
    proxy:
        base_url: https://${connectionConfig.baseUrl}
    docs: https://docs.nango.dev/integrations/all/drupal
    docs_connect: https://docs.nango.dev/integrations/all/drupal/connect
    credentials:
        clientId:
            type: string
            title: Client ID
            description: Your Client ID
            secret: true
            doc_section: '#step-3-generating-your-drupal-client-credentials'
        clientSecret:
            type: string
            title: Client Secret
            description: Your Client Secret
            secret: true
            doc_section: '#step-3-generating-your-drupal-client-credentials'
        userName:
            type: string
            title: User Name
            description: Your Drupal User Name
            doc_section: '#step-2-finding-your-drupal-user-name'
    connection_config:
        baseUrl:
            type: string
            title: Base Url
            description: Your Drupal base url
            example: example.drupal.com
            format: hostname
            prefix: https://
            order: 1
            doc_section: '#step-1-finding-your-drupal-base-url'

emarsys:
    display_name: Emarsys Core API (WSSE)
    categories:
        - marketing
    auth_mode: SIGNATURE
    signature:
        protocol: WSSE
    proxy:
        base_url: https://api.emarsys.net
        headers:
            content-type: application/json
            x-wsse: ${accessToken}
        verification:
            method: GET
            endpoints:
                - /api/v2/settings
        retry:
            at: 'x-ratelimit-reset'
    token:
        expires_in_ms: 300000
    docs: https://docs.nango.dev/integrations/all/emarsys
    credentials:
        username:
            type: string
            title: ID
            description: The ID of your Emarsys WSSE API Credentials
            pattern: '^[a-zA-Z0-9_-]+$'
        password:
            type: string
            title: Client Secret
            description: The Client Secret of your Emarsys WSSE API Credentials
            pattern: '^[a-zA-Z0-9-]+$'

emarsys-oauth:
    display_name: Emarsys (OAuth)
    categories:
        - marketing
    auth_mode: OAUTH2_CC
    token_url: https://auth.emarsys.net/oauth2/token
    token_request_auth_method: basic
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api.emarsys.net
        retry:
            at: 'x-ratelimit-reset'
    docs: https://docs.nango.dev/integrations/all/emarsys-oauth
    docs_connect: https://docs.nango.dev/integrations/all/emarsys-oauth/connect

employment-hero:
    display_name: Employment Hero
    categories:
        - hr
    auth_mode: OAUTH2
    authorization_url: https://oauth.employmenthero.com/oauth2/authorize
    token_url: https://oauth.employmenthero.com/oauth2/token
    disable_pkce: true
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.employmenthero.com/api
    docs: https://docs.nango.dev/integrations/all/employment-hero

ebay:
    display_name: eBay
    categories:
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://auth.ebay.com/oauth2/authorize
    token_url: https://api.ebay.com/identity/v1/oauth2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    token_request_auth_method: basic
    proxy:
        base_url: https://api.ebay.com/
    docs: https://docs.nango.dev/integrations/all/ebay

ebay-sandbox:
    display_name: eBay (Sandbox)
    categories:
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://auth.sandbox.ebay.com/oauth2/authorize
    token_url: https://api.sandbox.ebay.com/identity/v1/oauth2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    token_request_auth_method: basic
    proxy:
        base_url: https://api.sandbox.ebay.com/
    docs: https://docs.nango.dev/integrations/all/ebay-sandbox

e-conomic:
    display_name: e-conomic
    categories:
        - accounting
    auth_mode: BASIC
    proxy:
        base_url: https://restapi.e-conomic.com
        headers:
            content-type: application/json
    docs: https://docs.nango.dev/integrations/all/e-conomic
    credentials:
        username:
            type: string
            title: Private Token
            description: The Private Token for your e-conomic account
        password:
            type: string
            title: Agreement Grant Token
            description: The Agreement Grant Token for your e-conomic account

egnyte:
    display_name: Egnyte
    categories:
        - storage
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.egnyte.com/puboauth/token
    token_url: https://${connectionConfig.subdomain}.egnyte.com/puboauth/token
    scope_separator: ' '
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://${connectionConfig.subdomain}.egnyte.com/pubapi
    docs: https://docs.nango.dev/integrations/all/egnyte
    connection_config:
        subdomain:
            type: string
            title: Egnyte Domain
            description: The subdomain of your Egnyte account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .egnyte.com
            prefix: https://

elevenlabs:
    display_name: Eleven Labs
    categories:
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://api.elevenlabs.io
        headers:
            xi-api-key: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v1/user
    docs: https://docs.nango.dev/integrations/all/elevenlabs
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your ElevenLabs account

elevio:
    display_name: Elevio
    categories:
        - knowledge-base
        - support
    auth_mode: API_KEY
    proxy:
        base_url: https://api.elev.io
        headers:
            x-api-key: ${apiKey}
            authorization: Bearer ${connectionConfig.jwt}
    docs: https://docs.nango.dev/integrations/all/elevio
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key to your Elevio account
            pattern: '\b[a-f0-9]{40}\b'
            example: 'x12z67890dd34t8gq5j01ycc75912348'
    connection_config:
        jwt:
            type: string
            title: JWT
            description: The JWT to your Elevio account
            pattern: '^[A-Za-z0-9-_]+\.([A-Za-z0-9-_]+\.[A-Za-z0-9-_]+)$'

entrata:
    display_name: Entrata
    categories:
        - other
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.entrata.com
    docs: https://docs.nango.dev/integrations/all/entrata
    connection_config:
        subdomain:
            type: string
            title: Entrata Domain
            description: The subdomain of your Entrata account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .entrata.com
            prefix: https://

envoy:
    display_name: Envoy
    categories:
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://app.envoy.com/a/auth/v0/authorize
    token_url: https://app.envoy.com/a/auth/v0/token
    scope_separator: ' '
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.envoy.com
    docs: https://docs.nango.dev/integrations/all/envoy

epic-games:
    display_name: Epic Games
    categories:
        - gaming
    auth_mode: OAUTH2
    authorization_url: https://www.epicgames.com/id/authorize
    token_url: https://api.epicgames.dev/epic/oauth/v1/token
    authorization_method: header
    proxy:
        base_url: https://api.epicgames.dev
    docs: https://docs.nango.dev/integrations/all/epic-games

evaluagent:
    display_name: EvaluAgent
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.region}.evaluagent.com
        verification:
            method: GET
            endpoints:
                - /v1/ping
    docs: https://docs.nango.dev/integrations/all/evaluagent
    connection_config:
        region:
            type: string
            title: Region
            description: The region of your EvaluAgent account
            example: eu
            pattern: '^[a-z]+$'
    credentials:
        username:
            type: string
            title: Access Key Id
            description: The Access Key ID for your EvaluAgent account
            pattern: '^[a-zA-Z0-9-]+$'
        password:
            type: string
            title: Secret Key
            description: The Secret Key for your EvaluAgent account
            pattern: '^[a-zA-Z0-9-]+$'

eventbrite:
    display_name: Eventbrite
    categories:
        - marketing
    auth_mode: OAUTH2
    authorization_url: https://www.eventbrite.com/oauth/authorize
    token_url: https://www.eventbrite.com/oauth/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    proxy:
        base_url: https://www.eventbriteapi.com
    docs: https://docs.nango.dev/integrations/all/eventbrite

exa:
    display_name: Exa
    categories:
        - analytics
    auth_mode: API_KEY
    proxy:
        base_url: https://api.exa.ai
        headers:
            x-api-key: ${apiKey}
    docs: https://docs.nango.dev/integrations/all/exa
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Exa account

exact-online:
    display_name: Exact Online
    categories:
        - accounting
        - erp
    auth_mode: OAUTH2
    authorization_url: https://start.exactonline.${connectionConfig.extension}/api/oauth2/auth
    token_url: https://start.exactonline.${connectionConfig.extension}/api/oauth2/token
    authorization_method: header
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    token_expiration_buffer: 30
    proxy:
        base_url: https://start.exactonline.${connectionConfig.extension}/
        headers:
            accept: application/json
        retry:
            at: 'x-ratelimit-reset'
        paginate:
            type: link
            link_path_in_response_body: d.__next
    docs: https://docs.nango.dev/integrations/all/exact-online
    connection_config:
        extension:
            type: string
            title: Domain Extension
            description: The domain extension of your Exact Online account
            example: nl
            pattern: '^[a-z.]+$'

exist:
    display_name: Exist
    categories:
        - other
    auth_mode: OAUTH2
    authorization_url: https://exist.io/oauth2/authorize
    token_url: https://exist.io/oauth2/access_token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://exist.io/
        paginate:
            type: link
            link_path_in_response_body: next
    docs: https://docs.nango.dev/integrations/all/exist

expensify:
    display_name: Expensify
    categories:
        - productivity
    auth_mode: BASIC
    proxy:
        base_url: https://integrations.expensify.com/Integration-Server/
        headers:
            content-type: application/x-www-form-urlencoded
    credentials:
        username:
            type: string
            title: Partner User ID
            description: Your unique account identifier of Expensify
            doc_section: '#step-1-finding-your-partneruserid-and-partnerusersecret'
        password:
            type: string
            title: Partner User Secret
            description: Unique secret for your account
            doc_section: '#step-1-finding-your-partneruserid-and-partnerusersecret'
    credentials_verification_script: expensifyCredentialsVerification
    docs: https://docs.nango.dev/integrations/all/expensify
    docs_connect: https://docs.nango.dev/integrations/all/expensify/connect

factorial:
    display_name: Factorial
    categories:
        - hr
    auth_mode: OAUTH2
    authorization_url: https://api.factorialhr.com/oauth/authorize
    token_url: https://api.factorialhr.com/oauth/token
    disable_pkce: true
    proxy:
        base_url: https://api.factorialhr.com/api
    docs: https://docs.nango.dev/integrations/all/factorial

facebook:
    display_name: Facebook
    categories:
        - marketing
        - social
    auth_mode: OAUTH2
    authorization_url: https://www.facebook.com/v15.0/dialog/oauth
    token_url: https://graph.facebook.com/v15.0/oauth/access_token
    proxy:
        base_url: https://graph.facebook.com
    docs: https://docs.nango.dev/integrations/all/facebook

figjam:
    display_name: FigJam
    categories:
        - design
        - productivity
    alias: figma
    docs: https://docs.nango.dev/integrations/all/figjam

figma:
    display_name: Figma
    categories:
        - design
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://www.figma.com/oauth
    token_url: https://api.figma.com/v1/oauth/token
    refresh_url: https://api.figma.com/v1/oauth/refresh
    token_request_auth_method: basic
    scope_separator: ','
    disable_pkce: true
    proxy:
        base_url: https://api.figma.com
    docs: https://docs.nango.dev/integrations/all/figma

figma-scim:
    display_name: Figma (SCIM)
    categories:
        - design
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.host}/scim
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /v2/${connectionConfig.tenantId}/Users
    docs: https://docs.nango.dev/integrations/all/figma-scim
    docs_connect: https://docs.nango.dev/integrations/all/figma-scim/connect
    credentials:
        apiKey:
            type: string
            title: API Token
            description: The API token for your Figma account
            doc_section: '#step-3-generating-your-api-token'
    connection_config:
        host:
            type: string
            title: Host
            description: The host to your Figma account
            example: www.figma.com
            format: hostname
            prefix: https://
            pattern: ^(www\.figma\.com|figma-gov\.com)+$
            order: 1
            doc_section: '#step-1-finding-your-host'
        tenantId:
            type: string
            title: Tenant ID
            description: The tenant ID of your Figma account
            order: 2
            doc_section: '#step-2-finding-your-tenant-id'

falai:
    display_name: fal.ai
    categories:
        - productivity
        - dev-tools
    auth_mode: API_KEY
    proxy:
        headers:
            authorization: Key ${apiKey}
        base_url: https://queue.fal.run
        verification:
            method: POST
            endpoints:
                - /fal-ai/fast-sdxl
    docs: https://docs.nango.dev/integrations/all/falai
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your fal.ai account

findymail:
    display_name: FindyMail
    categories:
        - marketing
        - crm
    auth_mode: API_KEY
    proxy:
        base_url: https://app.findymail.com
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/findymail
    docs_connect: https://docs.nango.dev/integrations/all/findymail/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your FindyMail account

firefish:
    display_name: Firefish
    scope_separator: ' '
    categories:
        - crm
    auth_mode: OAUTH2_CC
    token_url: https://api.firefishsoftware.com/authorization/token
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api.firefishsoftware.com
    docs: https://docs.nango.dev/integrations/all/firefish

fireflies:
    display_name: Fireflies
    categories:
        - analytics
        - communication
        - productivity
    auth_mode: API_KEY
    proxy:
        base_url: https://api.fireflies.ai
        headers:
            authorization: Bearer ${apiKey}
        verification:
            method: GET
            endpoints:
                - /graphql?query=%7B__schema%7Btypes%7Bname%7D%7D%7D
    docs: https://docs.nango.dev/integrations/all/fireflies
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Fireflies account

fiserv:
    display_name: Fiserv (OAuth)
    categories:
        - banking
        - payment
    auth_mode: OAUTH2_CC
    token_url: https://cert.api.fiservapps.com/fts-apim/oauth2/v2
    token_request_auth_method: basic
    expires_in_unit: milliseconds
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://${connectionConfig.hostUrl}
    docs: https://docs.nango.dev/integrations/all/fiserv
    connection_config:
        hostUrl:
            type: string
            title: Domain
            description: The domain of your Fiserv account
            format: hostname
            prefix: https://

fiserv-api-key:
    display_name: Fiserv (API Key)
    categories:
        - banking
        - payment
    auth_mode: API_KEY
    proxy:
        base_url: https://prod.emea.api.fiservapps.com
        headers:
            api-key: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /sandbox/exp/v1/authorisations
    docs: https://docs.nango.dev/integrations/all/fiserv-api-key
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Fiserv account

fitbit:
    display_name: Fitbit
    categories:
        - sports
    auth_mode: OAUTH2
    authorization_url: https://www.fitbit.com/oauth2/authorize
    token_url: https://api.fitbit.com/oauth2/token
    authorization_method: header
    proxy:
        base_url: https://api.fitbit.com
    docs: https://docs.nango.dev/integrations/all/fitbit

fortnox:
    display_name: Fortnox
    categories:
        - accounting
        - invoicing
    auth_mode: OAUTH2
    authorization_url: https://apps.fortnox.se/oauth-v1/auth
    token_url: https://apps.fortnox.se/oauth-v1/token
    token_request_auth_method: basic
    scope_separator: ' '
    authorization_params:
        response_type: code
        access_type: offline
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://api.fortnox.se/3
    docs: https://docs.nango.dev/integrations/all/fortnox

freshbooks:
    display_name: FreshBooks
    categories:
        - accounting
    auth_mode: OAUTH2
    authorization_url: https://auth.freshbooks.com/oauth/authorize
    token_url: https://api.freshbooks.com/auth/oauth/token
    authorization_params:
        response_type: code
    proxy:
        base_url: https://api.freshbooks.com
    docs: https://docs.nango.dev/integrations/all/freshbooks

freshdesk:
    display_name: FreshDesk
    categories:
        - support
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.freshdesk.com
        verification:
            endpoints:
                - /api/v2/settings/helpdesk
    docs: https://docs.nango.dev/integrations/all/freshdesk
    docs_connect: https://docs.nango.dev/integrations/all/freshdesk/connect
    credentials:
        username:
            type: string
            title: FreshDesk API Key
            description: The API Key of your FreshDesk account
            doc_section: '#step-1-finding-your-freshdesk-api-key'
            secret: true
        password:
            type: string
            title: ''
            description: ''
            default_value: X
            hidden: true
    connection_config:
        subdomain:
            type: string
            title: FreshDesk Domain
            description: The subdomain of your FreshDesk account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .freshdesk.com
            prefix: https://
            doc_section: '#step-2-finding-your-freshdesk-domain'

freshsales:
    display_name: Freshsales
    categories:
        - crm
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.subdomain}.freshsales.io
        verification:
            method: GET
            endpoints:
                - /api/settings/leads/fields
        headers:
            authorization: Token token=${apiKey}
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/freshsales
    docs_connect: https://docs.nango.dev/integrations/all/freshsales/connect
    connection_config:
        subdomain:
            type: string
            title: Freshsales subdomain
            description: The subdomain of your Freshsales account
            pattern: '^[a-z0-9_-]+$'
            example: subdomain
            suffix: .freshsales.io
            prefix: https://
            doc_section: '#step-2-finding-your-freshsales-subdomain'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Freshsales account
            example: 4oBqA_AzM_G3xbW3TJGvrA
            pattern: '[A-Za-z0-9_]{22}'
            doc_section: '#step-1-finding-your-freshsales-api-key'

freshservice:
    display_name: Freshservice
    categories:
        - support
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.subdomain}.freshservice.com
        verification:
            method: GET
            endpoints:
                - /api/v2/tickets
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/freshservice
    docs_connect: https://docs.nango.dev/integrations/all/freshservice/connect
    connection_config:
        subdomain:
            type: string
            title: Freshservice subdomain
            description: The subdomain of your Freshservice account
            pattern: '^[a-z0-9_-]+$'
            example: subdomain
            suffix: .freshservice.com
            prefix: https://
            doc_section: '#step-2-finding-your-freshservice-subdomain'
    credentials:
        username:
            type: string
            title: API key
            description: The API Key of your Freshservice account
            secret: true
            doc_section: '#step-1-finding-your-freshservice-api-key'
        password:
            type: string
            title: ''
            description: ''
            # https://api.freshservice.com/#authentication
            # FreshService is using basic auth with an api key, the basic username/password was deprecated
            default_value: 'X'
            hidden: true

freshteam:
    display_name: Freshteam
    categories:
        - hr
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.accountName}.freshteam.com
        headers:
            authorization: Bearer ${apiKey}
            accept: application/json
    docs: https://docs.nango.dev/integrations/all/freshteam
    docs_connect: https://docs.nango.dev/integrations/all/freshteam/connect
    connection_config:
        accountName:
            type: string
            title: Account Name
            description: The account name of your Freshteam account
            example: nango
            format: hostname
            suffix: .freshteam.com
            prefix: https://
            order: 1
            doc_section: '#step-1-finding-your-account-name'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key to your Freshteam account
            doc_section: '#step-2-finding-your-api-key'
            example: 'XtoF94LMNyKPbd5AvR1QJh'
            pattern: '^[a-zA-Z0-9_!@#$%^&*()\\-+=]+$'

front:
    display_name: Front
    categories:
        - support
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://app.frontapp.com/oauth/authorize
    token_url: https://app.frontapp.com/oauth/token
    proxy:
        base_url: https://api2.frontapp.com
        retry:
            after: 'retry-after'
        paginate:
            type: link
            response_path: _results
            link_path_in_response_body: _pagination.next
    docs: https://docs.nango.dev/integrations/all/front

gainsight-cc:
    display_name: Gainsight CC
    categories:
        - support
        - crm
    auth_mode: OAUTH2_CC
    token_url: https://api2-${connectionConfig.region}.insided.com/oauth2/token
    scope_separator: ' '
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api2-${connectionConfig.region}.insided.com
    docs: https://docs.nango.dev/integrations/all/gainsight-cc
    docs_connect: https://docs.nango.dev/integrations/all/gainsight-cc/connect
    connection_config:
        region:
            type: string
            title: Region
            description: The region of your Gainsight account
            example: eu-west-1
            pattern: '^[a-z]{2}-[a-z]+-[1-9]$'
            doc_section: '#step-2-finding-your-region'

garmin:
    display_name: Garmin
    categories:
        - sports
    auth_mode: OAUTH1
    request_url: https://connectapi.garmin.com/oauth-service/oauth/request_token
    authorization_url: https://connect.garmin.com/oauthConfirm
    token_url: https://connectapi.garmin.com/oauth-service/oauth/access_token
    signature_method: 'HMAC-SHA1'
    proxy:
        base_url: https://apis.garmin.com
    docs: https://docs.nango.dev/integrations/all/garmin

gebruder-weiss:
    display_name: Gebrüder Weiss
    categories:
        - erp
    auth_mode: OAUTH2_CC
    authorization_url: https://my.api.gw-world.com/authorize
    token_url: https://my.api.gw-world.com/token
    token_request_auth_method: basic
    scope_separator: ' '
    token_params:
        grant_type: client_credentials
    proxy:
        headers:
            accept-language: en-US
        base_url: https://my.api.gw-world.com
    docs: https://docs.nango.dev/integrations/all/gebruder-weiss

google-gemini:
    display_name: Google Gemini
    categories:
        - productivity
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://generativelanguage.googleapis.com
        query:
            key: ${apiKey}
        headers:
            content-type: application/json
        verification:
            method: GET
            endpoints:
                - /v1/models
    docs: https://docs.nango.dev/integrations/all/google-gemini
    docs_connect: https://docs.nango.dev/integrations/all/google-gemini/connect
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The API key for your Gemini account
            doc_section: '#step-1-generating-your-api-key'
            example: 'AIzaSy**********RRtUK5V*********ZFFc64w****AI'
            pattern: '^[0-9A-Za-z_-]+$'

gem:
    display_name: Gem
    categories:
        - ats
    auth_mode: API_KEY
    proxy:
        base_url: https://api.gem.com
        headers:
            x-api-key: ${apiKey}
            x-application-secret: ${connectionConfig.appSecret}
        verification:
            method: GET
            endpoints:
                - /v0/users
    docs: https://docs.nango.dev/integrations/all/gem
    docs_connect: https://docs.nango.dev/integrations/all/gem/connect
    credentials:
        apiKey:
            type: string
            title: Shareable Access Key
            description: The Shareable Access Key for your Integration
            example: Xk9t3HZbWqLp7AeGvM4sUdYjBnR2TfQxCVi81oNz
            pattern: '^[a-zA-Z0-9]{40}$'
            doc_section: '#step-1-finding-your-shareable-access-key'
    connection_config:
        appSecret:
            type: string
            title: ''
            description: ''
            hidden: true

gerrit:
    display_name: Gerrit
    categories:
        - dev-tools
    auth_mode: BASIC
    proxy:
        base_url: https://${connectionConfig.host}
        verification:
            method: GET
            endpoints:
                - /config/server/version
    docs: https://docs.nango.dev/integrations/all/gerrit
    docs_connect: https://docs.nango.dev/integrations/all/gerrit/connect
    connection_config:
        host:
            type: string
            title: Gerrit Host
            description: The host to where you Gerrit instance is hosted
            pattern: '^https?:\/\/[a-z0-9.-]+(:\d+)?(\/.*)?$'
            example: http://localhost:8080
            doc_section: '#step-1-finding-your-host'
            order: 1

grammarly:
    display_name: Grammarly
    categories:
        - productivity
    auth_mode: OAUTH2_CC
    token_url: https://auth.grammarly.com/v4/api/oauth2/token
    scope_separator: ','
    token_params:
        grant_type: client_credentials
    proxy:
        base_url: https://api.grammarly.com/ecosystem/api
        verification:
            method: GET
            endpoints:
                - /v2/analytics/users
    docs: https://docs.nango.dev/integrations/all/grammarly

guru:
    display_name: Guru
    categories:
        - knowledge-base
    auth_mode: BASIC
    proxy:
        base_url: https://api.getguru.com/api/v1
        verification:
            method: GET
            endpoints:
                - /whoami
    docs: https://docs.nango.dev/integrations/all/guru
    docs_connect: https://docs.nango.dev/integrations/all/guru/connect
    credentials:
        username:
            type: string
            title: User/Collection ID
            description: The user or collection ID of your Guru account
            doc_section: '#step-1-finding-your-user-collection-id'
        password:
            type: string
            title: User/Collection Token
            description: The user or collection token of your Guru account
            secret: true
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
            doc_section: '#step-2-generating-your-user-collection-token'

guru-scim:
    display_name: Guru (SCIM)
    categories:
        - knowledge-base
    auth_mode: BASIC
    proxy:
        base_url: https://api.getguru.com/api/scim
        headers:
            content-type: application/scim+json
        verification:
            method: GET
            endpoints:
                - /v2/Users
            headers:
                content-type: application/scim+json
    docs: https://docs.nango.dev/integrations/all/guru-scim
    docs_connect: https://docs.nango.dev/integrations/all/guru-scim/connect
    credentials:
        username:
            type: string
            title: SCIM Username
            description: The SCIM username for your Guru account
            doc_section: '#step-1-finding-guru-scim-credentials'
        password:
            type: string
            title: SCIM Token
            description: The SCIM token for your Guru account
            doc_section: '#step-1-finding-guru-scim-credentials'

github:
    display_name: GitHub (User OAuth)
    categories:
        - dev-tools
        - support
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://github.com/login/oauth/authorize
    token_url: https://github.com/login/oauth/access_token
    proxy:
        base_url: https://api.github.com
        retry:
            at: 'x-ratelimit-reset'
            remaining: 'x-ratelimit-remaining'
            error_code: 403
        paginate:
            type: link
            limit_name_in_request: per_page
            link_rel_in_response_header: next
    docs: https://docs.nango.dev/integrations/all/github

github-app:
    display_name: GitHub (App)
    categories:
        - dev-tools
        - popular
        - ticketing
    alias: github
    auth_mode: APP
    authorization_url: ${connectionConfig.appPublicLink}/installations/new
    token_url: https://api.github.com/app/installations/${connectionConfig.installation_id}/access_tokens
    webhook_routing_script: githubAppWebhookRouting
    docs: https://docs.nango.dev/integrations/all/github-app
    connection_config:
        appPublicLink:
            type: string
            title: App Public Link
            description: The public link of your GitHub App
            format: uri
            pattern: '^https?://.*$'
            automated: true
        installation_id:
            type: string
            title: Installation ID
            description: The installation ID of your GitHub App
            example: '38631545'
            automated: true

github-app-oauth:
    display_name: GitHub (App OAuth)
    categories:
        - dev-tools
        - ticketing
    alias: github
    auth_mode: CUSTOM
    authorization_url: ${connectionConfig.appPublicLink}/installations/new
    authorization_url_skip_encode:
        - base_url
    token_url:
        OAUTH2: https://github.com/login/oauth/access_token
        APP: https://api.github.com/app/installations/${connectionConfig.installation_id}/access_tokens
    webhook_routing_script: githubAppOauthWebhookRouting
    post_connection_script: githubAppOauthPostConnection
    docs: https://docs.nango.dev/integrations/all/github-app-oauth
    connection_config:
        appPublicLink:
            type: string
            title: App Public Link
            description: The public link of your GitHub App
            format: uri
            pattern: '^https?://.*$'
            automated: true
        installation_id:
            type: string
            title: Installation ID
            description: The installation ID of your GitHub App
            example: '38631545'
            automated: true

github-pat:
    display_name: Github (Personal Access Token)
    categories:
        - dev-tools
        - ticketing
    auth_mode: API_KEY
    proxy:
        base_url: https://api.github.com
        retry:
            at: 'x-ratelimit-reset'
            remaining: 'x-ratelimit-remaining'
            error_code: 403
        headers:
            authorization: Bearer ${apiKey}
            x-github-api-version: ${connectionConfig.version} || 2022-11-28
            accept: application/vnd.github+json
        verification:
            method: GET
            endpoints:
                - /user
    docs: https://docs.nango.dev/integrations/all/github-pat
    docs_connect: https://docs.nango.dev/integrations/all/github-pat/connect
    connection_config:
        version:
            type: string
            title: ''
            description: ''
            automated: true
    credentials:
        apiKey:
            type: string
            title: Personal Access Token
            description: The Personal Access Token to your Github account
            pattern: '^(?:github_pat|ghp|gho|ghu|ghs|ghr)_[A-Za-z0-9_]{36,255}$'
            example: 'github_pat_***********************xRIoxmseCYRHDDIOFfTOyKex'
            doc_section: '#step-1-finding-your-personal-access-token'

gitlab:
    display_name: GitLab
    categories:
        - dev-tools
        - ticketing
    auth_mode: OAUTH2
    authorization_url: https://gitlab.com/oauth/authorize
    token_url: https://gitlab.com/oauth/token
    authorization_params:
        response_type: code
    proxy:
        base_url: https://gitlab.com
    docs: https://docs.nango.dev/integrations/all/gitlab

ghost-admin:
    display_name: Ghost (Admin API)
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: JWT
    signature:
        protocol: HMAC
    token:
        signing_key: ${credentials.privateKey.secret}
        expires_in_ms: 300000
        header:
            alg: HS256
            kid: ${credentials.privateKey.id}
        payload:
            aud: /admin/
    proxy:
        headers:
            accept: application/json
            accept-version: ${connectionConfig.version}
            authorization: Ghost ${accessToken}
        base_url: https://${connectionConfig.adminDomain}/ghost/api/admin/
        verification:
            method: GET
            endpoints:
                - /users
    docs: https://docs.nango.dev/integrations/all/ghost-admin
    connection_config:
        adminDomain:
            type: string
            title: Ghost Admin Domain
            description: The domain of your Ghost Admin which can be different from your main domain
            example: 'mock.ghost.io'
            pattern: '^([a-z0-9_-]+\.|)(ghost\.io|[a-z0-9_-]+\.[a-z]{2,})$'
            order: 1
        version:
            type: string
            title: API Version
            description: The version of the Ghost Admin API to use
            example: 'v3.0'
            pattern: '^v\d+\.\d+$'
            order: 2
    credentials:
        privateKey:
            type: string
            title: API Key
            description: The private key for your Ghost account
            pattern: '^[a-fA-F0-9]{24}:[a-fA-F0-9]{64}$'
            example: 1234567890abcdef12345678:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890

ghost-content:
    display_name: Ghost (Content API)
    categories:
        - dev-tools
        - design
        - cms
    auth_mode: API_KEY
    proxy:
        headers:
            accept-version: ${connectionConfig.version}
        base_url: https://${connectionConfig.adminDomain}/ghost/api/content/
        query:
            key: ${apiKey}
        verification:
            method: GET
            endpoints:
                - /tags
    docs: https://docs.nango.dev/integrations/all/ghost-content
    connection_config:
        version:
            type: string
            title: API Version
            description: The version of the Ghost Admin API to use
            example: 'v3.0'
            pattern: '^v\d+\.\d+$'
        adminDomain:
            type: string
            title: Ghost Admin Domain
            description: The domain of your Ghost Admin which can be different from your main domain
            example: 'mock.ghost.io'
            pattern: '^([a-z0-9_-]+\.|)(ghost\.io|[a-z0-9_-]+\.[a-z]{2,})$'
    credentials:
        apiKey:
            type: string
            title: API Key
            description: The content API key for your Ghost account
            pattern: '^[a-zA-Z0-9]{26}$'
            example: a1b2c3d4e5f6g7h8i9j0k1l2m3

gong:
    display_name: Gong (Basic Auth)
    categories:
        - communication
        - marketing
        - productivity
        - video
    auth_mode: BASIC
    proxy:
        base_url: https://api.gong.io
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/gong
    docs_connect: https://docs.nango.dev/integrations/all/gong/connect
    credentials:
        username:
            type: string
            title: Access Key
            description: Your Gong Access Key
            pattern: '^[a-zA-Z0-9-]+$'
            doc_section: '#step-1-finding-gong-api-key-and-api-key-secret'
        password:
            type: string
            title: Access Key Secret
            description: Your Gong Access Key Secret
            default_value: ''
            doc_section: '#step-1-finding-gong-api-key-and-api-key-secret'

gong-oauth:
    display_name: Gong (Oauth)
    auth_mode: OAUTH2
    categories:
        - communication
        - marketing
        - productivity
        - video
        - popular
    authorization_url: https://app.gong.io/oauth2/authorize
    token_url: https://app.gong.io/oauth2/generate-customer-token
    token_response_metadata:
        - api_base_url_for_customer
    authorization_params:
        response_type: code
        access_type: offline
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    disable_pkce: true
    token_request_auth_method: basic
    proxy:
        base_url: ${connectionConfig.api_base_url_for_customer} || https://api.gong.io
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/gong-oauth
    connection_config:
        api_base_url_for_customer:
            type: string
            title: API Base URL
            description: The base URL of your Gong account
            format: uri
            automated: true
            pattern: '^https?://.*$'

google:
    display_name: Google
    categories:
        - communication
        - dev-tools
        - productivity
        - social
    auth_mode: OAUTH2
    authorization_url: https://accounts.google.com/o/oauth2/v2/auth
    token_url: https://oauth2.googleapis.com/token
    authorization_params:
        response_type: code
        access_type: offline
        prompt: consent
    proxy:
        base_url: https://www.googleapis.com
        paginate:
            type: cursor
            cursor_path_in_response: nextPageToken
            limit_name_in_request: maxSize
            cursor_name_in_request: pageToken
            response_path: items
    docs: https://docs.nango.dev/integrations/all/google

google-analytics:
    display_name: Google Analytics
    alias: google
    categories:
        - analytics
    docs: https://docs.nango.dev/integrations/all/google-analytics

google-calendar:
    display_name: Google Calendar
    categories:
        - popular
        - productivity
    alias: google
    proxy:
        base_url: https://www.googleapis.com
        paginate:
            type: cursor
            cursor_path_in_response: nextPageToken
            limit_name_in_request: maxSize
            cursor_name_in_request: pageToken
            response_path: items
        retry:
            error_code: 403
    docs: https://docs.nango.dev/integrations/all/google-calendar

google-docs:
    display_name: Google Docs
    categories:
        - productivity
    alias: google
    proxy:
        base_url: https://docs.googleapis.com
    docs: https://docs.nango.dev/integrations/all/google-docs

google-mail:
    display_name: Gmail
    categories:
        - popular
        - productivity
    alias: google
    proxy:
        base_url: https://gmail.googleapis.com
    docs: https://docs.nango.dev/integrations/all/google-mail

google-sheet:
    display_name: Google Sheet
    categories:
        - productivity
    alias: google
    proxy:
        base_url: https://sheets.googleapis.com
    docs: https://docs.nango.dev/integrations/all/google-sheet

google-slides:
    display_name: Google Slides
    categories:
        - productivity
    alias: google
    proxy:
        base_url: https://slides.googleapis.com
    docs: https://docs.nango.dev/integrations/all/google-slides

google-drive:
    display_name: Google Drive
    categories:
        - knowledge-base
        - popular
        - storage
    alias: google
    docs: https://docs.nango.dev/integrations/all/google-drive

google-ads:
    display_name: Google Ads
    categories:
        - marketing
    alias: google
    token_url: https://www.googleapis.com/oauth2/v3/token
    proxy:
        base_url: https://googleads.googleapis.com
        paginate:
            type: cursor
            cursor_path_in_response: nextPageToken
            limit_name_in_request: pageSize
            cursor_name_in_request: pageToken
            response_path: results
    docs: https://docs.nango.dev/integrations/all/google-ads

google-play:
    display_name: Google Play
    categories:
        - dev-tools
    auth_mode: OAUTH2
    authorization_url: https://accounts.google.com/o/oauth2/auth
    token_url: https://accounts.google.com/o/oauth2/token
    authorization_params:
        response_type: code
        access_type: offline
        prompt: consent
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://play.googleapis.com
    docs: https://docs.nango.dev/integrations/all/google-play

gorgias:
    display_name: Gorgias
    categories:
        - e-commerce
    auth_mode: OAUTH2
    authorization_url: https://${connectionConfig.subdomain}.gorgias.com/oauth/authorize
    token_url: https://${connectionConfig.subdomain}.gorgias.com/oauth/token
    token_request_auth_method: basic
    default_scopes:
        - offline
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    refresh_params:
        grant_type: refresh_token
    proxy:
        base_url: https://${connectionConfig.subdomain}.gorgias.com
        retry:
            after: 'retry-after'
    docs: https://docs.nango.dev/integrations/all/gorgias
    connection_config:
        subdomain:
            type: string
            title: Gorgias Domain
            description: The subdomain of your Gorgias account
            pattern: '^[a-z0-9_-]+$'
            example: domain
            suffix: .gorgias.com
            prefix: https://

gorgias-basic:
    display_name: Gorgias (Basic Auth)
    auth_mode: BASIC
    categories:
        - e-commerce
    proxy:
        base_url: https://${connectionConfig.subdomain}.gorgias.com
    docs: https://docs.nango.dev/integrations/all/gorgias-basic
    docs_connect: https://docs.nango.dev/integrations/all/gorgias-basic/connect
    credentials:
        username:
            type: string
            title: Username
            description: Your Gorgias account Username
        password:
            type: string
            title: API Key
            description: Your Gorgias API Key
            default_value: ''
            doc_section: '#step-1-finding-gorgias-api-key-secret'
    connection_config:
        subdomain:
            type: string
            title: Gorgias Domain
            description: The subdomain of your Gorgias account
            pattern: '^[a-z0-9_-]+$'
            prefix: https://
            order: 1

grafana:
    display_name: Grafana
    categories:
        - dev-tools
    auth_mode: API_KEY
    proxy:
        base_url: https://${connectionConfig.domain}
        verification:
            endpoints:
                - /api/access-control/user/permissions
            method: GET
        headers:
            authorization: Bearer ${apiKey}
    docs: https://docs.nango.dev/integrations/all/grafana
    docs_connect: https://docs.nango.dev/integrations/all/grafana/connect
    connection_config:
        domain:
            type: string
            title: Domain
            description: Your Grafana domain
            example: example.grafana.net
            prefix: https://
            format: hostname
            order: 1
            doc_section: '#step-1-finding-your-domain'
    credentials:
        apiKey:
            type: string
            title: Token
            description: The Token for your Grafana service account
            example: glsa_*****************************************
            pattern: '^[A-Za-z0-9_-]+$'
            doc_section: '#step-2-generating-your-service-account-token'

grain:
    display_name: Grain (OAuth)
    categories:
        - video
        - communication
        - productivity
    auth_mode: OAUTH2
    authorization_url: https://grain.com/_/public-api/oauth2/authorize
    token_url: https://api.grain.com/_/public-api/oauth2/token
    authorization_params:
        response_type: code
    token_params:
        grant_type: authorization_code
    proxy:
        base_url: https://api.grain.com
    docs: https://docs.nango.dev/integrations/all/grain
